// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace test_2 {
class client_field_link_info_quest;
struct client_field_link_info_questDefaultTypeInternal;
extern client_field_link_info_questDefaultTypeInternal _client_field_link_info_quest_default_instance_;
class client_login_request;
struct client_login_requestDefaultTypeInternal;
extern client_login_requestDefaultTypeInternal _client_login_request_default_instance_;
class client_lua_list_data_quest;
struct client_lua_list_data_questDefaultTypeInternal;
extern client_lua_list_data_questDefaultTypeInternal _client_lua_list_data_quest_default_instance_;
class client_lua_table_data_quest;
struct client_lua_table_data_questDefaultTypeInternal;
extern client_lua_table_data_questDefaultTypeInternal _client_lua_table_data_quest_default_instance_;
class client_modify_server_time_quest;
struct client_modify_server_time_questDefaultTypeInternal;
extern client_modify_server_time_questDefaultTypeInternal _client_modify_server_time_quest_default_instance_;
class client_save_table_data_request;
struct client_save_table_data_requestDefaultTypeInternal;
extern client_save_table_data_requestDefaultTypeInternal _client_save_table_data_request_default_instance_;
class client_save_table_info_request;
struct client_save_table_info_requestDefaultTypeInternal;
extern client_save_table_info_requestDefaultTypeInternal _client_save_table_info_request_default_instance_;
class client_shell_option_quest;
struct client_shell_option_questDefaultTypeInternal;
extern client_shell_option_questDefaultTypeInternal _client_shell_option_quest_default_instance_;
class field_info;
struct field_infoDefaultTypeInternal;
extern field_infoDefaultTypeInternal _field_info_default_instance_;
class field_squence;
struct field_squenceDefaultTypeInternal;
extern field_squenceDefaultTypeInternal _field_squence_default_instance_;
class field_type_key_value;
struct field_type_key_valueDefaultTypeInternal;
extern field_type_key_valueDefaultTypeInternal _field_type_key_value_default_instance_;
class field_type_pair;
struct field_type_pairDefaultTypeInternal;
extern field_type_pairDefaultTypeInternal _field_type_pair_default_instance_;
class pair_value;
struct pair_valueDefaultTypeInternal;
extern pair_valueDefaultTypeInternal _pair_value_default_instance_;
class process_statue_info;
struct process_statue_infoDefaultTypeInternal;
extern process_statue_infoDefaultTypeInternal _process_statue_info_default_instance_;
class row_data;
struct row_dataDefaultTypeInternal;
extern row_dataDefaultTypeInternal _row_data_default_instance_;
class save_lua_list_data_request;
struct save_lua_list_data_requestDefaultTypeInternal;
extern save_lua_list_data_requestDefaultTypeInternal _save_lua_list_data_request_default_instance_;
class send_field_link_info;
struct send_field_link_infoDefaultTypeInternal;
extern send_field_link_infoDefaultTypeInternal _send_field_link_info_default_instance_;
class send_lua_list_data_notify;
struct send_lua_list_data_notifyDefaultTypeInternal;
extern send_lua_list_data_notifyDefaultTypeInternal _send_lua_list_data_notify_default_instance_;
class send_process_listening_status_info;
struct send_process_listening_status_infoDefaultTypeInternal;
extern send_process_listening_status_infoDefaultTypeInternal _send_process_listening_status_info_default_instance_;
class send_server_current_time_nofity;
struct send_server_current_time_nofityDefaultTypeInternal;
extern send_server_current_time_nofityDefaultTypeInternal _send_server_current_time_nofity_default_instance_;
class send_shell_option_print_notify;
struct send_shell_option_print_notifyDefaultTypeInternal;
extern send_shell_option_print_notifyDefaultTypeInternal _send_shell_option_print_notify_default_instance_;
class server_send_current_time_notify;
struct server_send_current_time_notifyDefaultTypeInternal;
extern server_send_current_time_notifyDefaultTypeInternal _server_send_current_time_notify_default_instance_;
class server_send_file_tree_notify;
struct server_send_file_tree_notifyDefaultTypeInternal;
extern server_send_file_tree_notifyDefaultTypeInternal _server_send_file_tree_notify_default_instance_;
class server_send_shell_config_notify;
struct server_send_shell_config_notifyDefaultTypeInternal;
extern server_send_shell_config_notifyDefaultTypeInternal _server_send_shell_config_notify_default_instance_;
class table_data;
struct table_dataDefaultTypeInternal;
extern table_dataDefaultTypeInternal _table_data_default_instance_;
class table_field_list;
struct table_field_listDefaultTypeInternal;
extern table_field_listDefaultTypeInternal _table_field_list_default_instance_;
class table_info;
struct table_infoDefaultTypeInternal;
extern table_infoDefaultTypeInternal _table_info_default_instance_;
}  // namespace test_2
PROTOBUF_NAMESPACE_OPEN
template<> ::test_2::client_field_link_info_quest* Arena::CreateMaybeMessage<::test_2::client_field_link_info_quest>(Arena*);
template<> ::test_2::client_login_request* Arena::CreateMaybeMessage<::test_2::client_login_request>(Arena*);
template<> ::test_2::client_lua_list_data_quest* Arena::CreateMaybeMessage<::test_2::client_lua_list_data_quest>(Arena*);
template<> ::test_2::client_lua_table_data_quest* Arena::CreateMaybeMessage<::test_2::client_lua_table_data_quest>(Arena*);
template<> ::test_2::client_modify_server_time_quest* Arena::CreateMaybeMessage<::test_2::client_modify_server_time_quest>(Arena*);
template<> ::test_2::client_save_table_data_request* Arena::CreateMaybeMessage<::test_2::client_save_table_data_request>(Arena*);
template<> ::test_2::client_save_table_info_request* Arena::CreateMaybeMessage<::test_2::client_save_table_info_request>(Arena*);
template<> ::test_2::client_shell_option_quest* Arena::CreateMaybeMessage<::test_2::client_shell_option_quest>(Arena*);
template<> ::test_2::field_info* Arena::CreateMaybeMessage<::test_2::field_info>(Arena*);
template<> ::test_2::field_squence* Arena::CreateMaybeMessage<::test_2::field_squence>(Arena*);
template<> ::test_2::field_type_key_value* Arena::CreateMaybeMessage<::test_2::field_type_key_value>(Arena*);
template<> ::test_2::field_type_pair* Arena::CreateMaybeMessage<::test_2::field_type_pair>(Arena*);
template<> ::test_2::pair_value* Arena::CreateMaybeMessage<::test_2::pair_value>(Arena*);
template<> ::test_2::process_statue_info* Arena::CreateMaybeMessage<::test_2::process_statue_info>(Arena*);
template<> ::test_2::row_data* Arena::CreateMaybeMessage<::test_2::row_data>(Arena*);
template<> ::test_2::save_lua_list_data_request* Arena::CreateMaybeMessage<::test_2::save_lua_list_data_request>(Arena*);
template<> ::test_2::send_field_link_info* Arena::CreateMaybeMessage<::test_2::send_field_link_info>(Arena*);
template<> ::test_2::send_lua_list_data_notify* Arena::CreateMaybeMessage<::test_2::send_lua_list_data_notify>(Arena*);
template<> ::test_2::send_process_listening_status_info* Arena::CreateMaybeMessage<::test_2::send_process_listening_status_info>(Arena*);
template<> ::test_2::send_server_current_time_nofity* Arena::CreateMaybeMessage<::test_2::send_server_current_time_nofity>(Arena*);
template<> ::test_2::send_shell_option_print_notify* Arena::CreateMaybeMessage<::test_2::send_shell_option_print_notify>(Arena*);
template<> ::test_2::server_send_current_time_notify* Arena::CreateMaybeMessage<::test_2::server_send_current_time_notify>(Arena*);
template<> ::test_2::server_send_file_tree_notify* Arena::CreateMaybeMessage<::test_2::server_send_file_tree_notify>(Arena*);
template<> ::test_2::server_send_shell_config_notify* Arena::CreateMaybeMessage<::test_2::server_send_shell_config_notify>(Arena*);
template<> ::test_2::table_data* Arena::CreateMaybeMessage<::test_2::table_data>(Arena*);
template<> ::test_2::table_field_list* Arena::CreateMaybeMessage<::test_2::table_field_list>(Arena*);
template<> ::test_2::table_info* Arena::CreateMaybeMessage<::test_2::table_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test_2 {

enum client_msg : int {
  REQUEST_LOGIN = 0,
  REQUSET_LUA_TABLE_DATA = 1,
  REQUSET_SAVE_TABLE_DATA = 2,
  REQUSET_SHELL_OPTIONS = 3,
  REQUEST_SAVE_TABLE_INFO = 4,
  REQUEST_MODIFY_SERVER_TIME = 5,
  REQUSET_LUA_LIST_DATA = 6,
  REQUSET_SAVE_LUA_LIST_DATA = 7,
  REQUSET_FIELD_LINK_INFO = 8,
  client_msg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  client_msg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool client_msg_IsValid(int value);
constexpr client_msg client_msg_MIN = REQUEST_LOGIN;
constexpr client_msg client_msg_MAX = REQUSET_FIELD_LINK_INFO;
constexpr int client_msg_ARRAYSIZE = client_msg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* client_msg_descriptor();
template<typename T>
inline const std::string& client_msg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, client_msg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function client_msg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    client_msg_descriptor(), enum_t_value);
}
inline bool client_msg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, client_msg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<client_msg>(
    client_msg_descriptor(), name, value);
}
enum server_msg : int {
  SEND_FILE_TREE_INFO = 0,
  SEND_SERVER_TIME = 1,
  SEND_LUA_TABLE_DATA = 2,
  SEND_SHELL_CONFIG = 3,
  SEND_OPTION_SHELL_PRINT = 4,
  SEND_LUA_LIST_DATA = 5,
  SEND_FIELD_LINK_DATA = 6,
  SEND_PROCESS_STATUS_INFO = 7,
  server_msg_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  server_msg_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool server_msg_IsValid(int value);
constexpr server_msg server_msg_MIN = SEND_FILE_TREE_INFO;
constexpr server_msg server_msg_MAX = SEND_PROCESS_STATUS_INFO;
constexpr int server_msg_ARRAYSIZE = server_msg_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* server_msg_descriptor();
template<typename T>
inline const std::string& server_msg_Name(T enum_t_value) {
  static_assert(::std::is_same<T, server_msg>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function server_msg_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    server_msg_descriptor(), enum_t_value);
}
inline bool server_msg_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, server_msg* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<server_msg>(
    server_msg_descriptor(), name, value);
}
enum DATA_TYPE : int {
  L_NUMBER = 0,
  L_STRING = 1,
  L_BOOL = 2,
  L_TABLE_STRING = 3,
  L_FUNCTION = 4,
  DATA_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DATA_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DATA_TYPE_IsValid(int value);
constexpr DATA_TYPE DATA_TYPE_MIN = L_NUMBER;
constexpr DATA_TYPE DATA_TYPE_MAX = L_FUNCTION;
constexpr int DATA_TYPE_ARRAYSIZE = DATA_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DATA_TYPE_descriptor();
template<typename T>
inline const std::string& DATA_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DATA_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DATA_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DATA_TYPE_descriptor(), enum_t_value);
}
inline bool DATA_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DATA_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DATA_TYPE>(
    DATA_TYPE_descriptor(), name, value);
}
// ===================================================================

class client_login_request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:test_2.client_login_request) */ {
 public:
  inline client_login_request() : client_login_request(nullptr) {}
  explicit constexpr client_login_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_login_request(const client_login_request& from);
  client_login_request(client_login_request&& from) noexcept
    : client_login_request() {
    *this = ::std::move(from);
  }

  inline client_login_request& operator=(const client_login_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_login_request& operator=(client_login_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_login_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_login_request* internal_default_instance() {
    return reinterpret_cast<const client_login_request*>(
               &_client_login_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(client_login_request& a, client_login_request& b) {
    a.Swap(&b);
  }
  inline void Swap(client_login_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_login_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_login_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_login_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const client_login_request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const client_login_request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_login_request";
  }
  protected:
  explicit client_login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test_2.client_login_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class server_send_file_tree_notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.server_send_file_tree_notify) */ {
 public:
  inline server_send_file_tree_notify() : server_send_file_tree_notify(nullptr) {}
  ~server_send_file_tree_notify() override;
  explicit constexpr server_send_file_tree_notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  server_send_file_tree_notify(const server_send_file_tree_notify& from);
  server_send_file_tree_notify(server_send_file_tree_notify&& from) noexcept
    : server_send_file_tree_notify() {
    *this = ::std::move(from);
  }

  inline server_send_file_tree_notify& operator=(const server_send_file_tree_notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline server_send_file_tree_notify& operator=(server_send_file_tree_notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const server_send_file_tree_notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const server_send_file_tree_notify* internal_default_instance() {
    return reinterpret_cast<const server_send_file_tree_notify*>(
               &_server_send_file_tree_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(server_send_file_tree_notify& a, server_send_file_tree_notify& b) {
    a.Swap(&b);
  }
  inline void Swap(server_send_file_tree_notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(server_send_file_tree_notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  server_send_file_tree_notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<server_send_file_tree_notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const server_send_file_tree_notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const server_send_file_tree_notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_send_file_tree_notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.server_send_file_tree_notify";
  }
  protected:
  explicit server_send_file_tree_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLuaFileNamesFieldNumber = 1,
    kLuaTableFileNamesFieldNumber = 2,
    kGroupNamesFieldNumber = 3,
  };
  // repeated bytes lua_file_names = 1;
  int lua_file_names_size() const;
  private:
  int _internal_lua_file_names_size() const;
  public:
  void clear_lua_file_names();
  const std::string& lua_file_names(int index) const;
  std::string* mutable_lua_file_names(int index);
  void set_lua_file_names(int index, const std::string& value);
  void set_lua_file_names(int index, std::string&& value);
  void set_lua_file_names(int index, const char* value);
  void set_lua_file_names(int index, const void* value, size_t size);
  std::string* add_lua_file_names();
  void add_lua_file_names(const std::string& value);
  void add_lua_file_names(std::string&& value);
  void add_lua_file_names(const char* value);
  void add_lua_file_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lua_file_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lua_file_names();
  private:
  const std::string& _internal_lua_file_names(int index) const;
  std::string* _internal_add_lua_file_names();
  public:

  // repeated bytes lua_table_file_names = 2;
  int lua_table_file_names_size() const;
  private:
  int _internal_lua_table_file_names_size() const;
  public:
  void clear_lua_table_file_names();
  const std::string& lua_table_file_names(int index) const;
  std::string* mutable_lua_table_file_names(int index);
  void set_lua_table_file_names(int index, const std::string& value);
  void set_lua_table_file_names(int index, std::string&& value);
  void set_lua_table_file_names(int index, const char* value);
  void set_lua_table_file_names(int index, const void* value, size_t size);
  std::string* add_lua_table_file_names();
  void add_lua_table_file_names(const std::string& value);
  void add_lua_table_file_names(std::string&& value);
  void add_lua_table_file_names(const char* value);
  void add_lua_table_file_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& lua_table_file_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_lua_table_file_names();
  private:
  const std::string& _internal_lua_table_file_names(int index) const;
  std::string* _internal_add_lua_table_file_names();
  public:

  // repeated bytes group_names = 3;
  int group_names_size() const;
  private:
  int _internal_group_names_size() const;
  public:
  void clear_group_names();
  const std::string& group_names(int index) const;
  std::string* mutable_group_names(int index);
  void set_group_names(int index, const std::string& value);
  void set_group_names(int index, std::string&& value);
  void set_group_names(int index, const char* value);
  void set_group_names(int index, const void* value, size_t size);
  std::string* add_group_names();
  void add_group_names(const std::string& value);
  void add_group_names(std::string&& value);
  void add_group_names(const char* value);
  void add_group_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& group_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_group_names();
  private:
  const std::string& _internal_group_names(int index) const;
  std::string* _internal_add_group_names();
  public:

  // @@protoc_insertion_point(class_scope:test_2.server_send_file_tree_notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lua_file_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> lua_table_file_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> group_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class server_send_shell_config_notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.server_send_shell_config_notify) */ {
 public:
  inline server_send_shell_config_notify() : server_send_shell_config_notify(nullptr) {}
  ~server_send_shell_config_notify() override;
  explicit constexpr server_send_shell_config_notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  server_send_shell_config_notify(const server_send_shell_config_notify& from);
  server_send_shell_config_notify(server_send_shell_config_notify&& from) noexcept
    : server_send_shell_config_notify() {
    *this = ::std::move(from);
  }

  inline server_send_shell_config_notify& operator=(const server_send_shell_config_notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline server_send_shell_config_notify& operator=(server_send_shell_config_notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const server_send_shell_config_notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const server_send_shell_config_notify* internal_default_instance() {
    return reinterpret_cast<const server_send_shell_config_notify*>(
               &_server_send_shell_config_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(server_send_shell_config_notify& a, server_send_shell_config_notify& b) {
    a.Swap(&b);
  }
  inline void Swap(server_send_shell_config_notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(server_send_shell_config_notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  server_send_shell_config_notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<server_send_shell_config_notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const server_send_shell_config_notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const server_send_shell_config_notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_send_shell_config_notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.server_send_shell_config_notify";
  }
  protected:
  explicit server_send_shell_config_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShellOpsFieldNumber = 1,
  };
  // repeated bytes shell_ops = 1;
  int shell_ops_size() const;
  private:
  int _internal_shell_ops_size() const;
  public:
  void clear_shell_ops();
  const std::string& shell_ops(int index) const;
  std::string* mutable_shell_ops(int index);
  void set_shell_ops(int index, const std::string& value);
  void set_shell_ops(int index, std::string&& value);
  void set_shell_ops(int index, const char* value);
  void set_shell_ops(int index, const void* value, size_t size);
  std::string* add_shell_ops();
  void add_shell_ops(const std::string& value);
  void add_shell_ops(std::string&& value);
  void add_shell_ops(const char* value);
  void add_shell_ops(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& shell_ops() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_shell_ops();
  private:
  const std::string& _internal_shell_ops(int index) const;
  std::string* _internal_add_shell_ops();
  public:

  // @@protoc_insertion_point(class_scope:test_2.server_send_shell_config_notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> shell_ops_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_lua_table_data_quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.client_lua_table_data_quest) */ {
 public:
  inline client_lua_table_data_quest() : client_lua_table_data_quest(nullptr) {}
  ~client_lua_table_data_quest() override;
  explicit constexpr client_lua_table_data_quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_lua_table_data_quest(const client_lua_table_data_quest& from);
  client_lua_table_data_quest(client_lua_table_data_quest&& from) noexcept
    : client_lua_table_data_quest() {
    *this = ::std::move(from);
  }

  inline client_lua_table_data_quest& operator=(const client_lua_table_data_quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_lua_table_data_quest& operator=(client_lua_table_data_quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_lua_table_data_quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_lua_table_data_quest* internal_default_instance() {
    return reinterpret_cast<const client_lua_table_data_quest*>(
               &_client_lua_table_data_quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(client_lua_table_data_quest& a, client_lua_table_data_quest& b) {
    a.Swap(&b);
  }
  inline void Swap(client_lua_table_data_quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_lua_table_data_quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_lua_table_data_quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_lua_table_data_quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_lua_table_data_quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_lua_table_data_quest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_lua_table_data_quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_lua_table_data_quest";
  }
  protected:
  explicit client_lua_table_data_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // bytes file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.client_lua_table_data_quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_shell_option_quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.client_shell_option_quest) */ {
 public:
  inline client_shell_option_quest() : client_shell_option_quest(nullptr) {}
  ~client_shell_option_quest() override;
  explicit constexpr client_shell_option_quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_shell_option_quest(const client_shell_option_quest& from);
  client_shell_option_quest(client_shell_option_quest&& from) noexcept
    : client_shell_option_quest() {
    *this = ::std::move(from);
  }

  inline client_shell_option_quest& operator=(const client_shell_option_quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_shell_option_quest& operator=(client_shell_option_quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_shell_option_quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_shell_option_quest* internal_default_instance() {
    return reinterpret_cast<const client_shell_option_quest*>(
               &_client_shell_option_quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(client_shell_option_quest& a, client_shell_option_quest& b) {
    a.Swap(&b);
  }
  inline void Swap(client_shell_option_quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_shell_option_quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_shell_option_quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_shell_option_quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_shell_option_quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_shell_option_quest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_shell_option_quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_shell_option_quest";
  }
  protected:
  explicit client_shell_option_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOptionFieldNumber = 1,
  };
  // bytes option = 1;
  void clear_option();
  const std::string& option() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_option(ArgT0&& arg0, ArgT... args);
  std::string* mutable_option();
  PROTOBUF_NODISCARD std::string* release_option();
  void set_allocated_option(std::string* option);
  private:
  const std::string& _internal_option() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_option(const std::string& value);
  std::string* _internal_mutable_option();
  public:

  // @@protoc_insertion_point(class_scope:test_2.client_shell_option_quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class server_send_current_time_notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.server_send_current_time_notify) */ {
 public:
  inline server_send_current_time_notify() : server_send_current_time_notify(nullptr) {}
  ~server_send_current_time_notify() override;
  explicit constexpr server_send_current_time_notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  server_send_current_time_notify(const server_send_current_time_notify& from);
  server_send_current_time_notify(server_send_current_time_notify&& from) noexcept
    : server_send_current_time_notify() {
    *this = ::std::move(from);
  }

  inline server_send_current_time_notify& operator=(const server_send_current_time_notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline server_send_current_time_notify& operator=(server_send_current_time_notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const server_send_current_time_notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const server_send_current_time_notify* internal_default_instance() {
    return reinterpret_cast<const server_send_current_time_notify*>(
               &_server_send_current_time_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(server_send_current_time_notify& a, server_send_current_time_notify& b) {
    a.Swap(&b);
  }
  inline void Swap(server_send_current_time_notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(server_send_current_time_notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  server_send_current_time_notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<server_send_current_time_notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const server_send_current_time_notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const server_send_current_time_notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(server_send_current_time_notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.server_send_current_time_notify";
  }
  protected:
  explicit server_send_current_time_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeZoneFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // bytes time_zone = 2;
  void clear_time_zone();
  const std::string& time_zone() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_time_zone(ArgT0&& arg0, ArgT... args);
  std::string* mutable_time_zone();
  PROTOBUF_NODISCARD std::string* release_time_zone();
  void set_allocated_time_zone(std::string* time_zone);
  private:
  const std::string& _internal_time_zone() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time_zone(const std::string& value);
  std::string* _internal_mutable_time_zone();
  public:

  // int64 time_stamp = 1;
  void clear_time_stamp();
  int64_t time_stamp() const;
  void set_time_stamp(int64_t value);
  private:
  int64_t _internal_time_stamp() const;
  void _internal_set_time_stamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.server_send_current_time_notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_zone_;
  int64_t time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class pair_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.pair_value) */ {
 public:
  inline pair_value() : pair_value(nullptr) {}
  ~pair_value() override;
  explicit constexpr pair_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  pair_value(const pair_value& from);
  pair_value(pair_value&& from) noexcept
    : pair_value() {
    *this = ::std::move(from);
  }

  inline pair_value& operator=(const pair_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline pair_value& operator=(pair_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const pair_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const pair_value* internal_default_instance() {
    return reinterpret_cast<const pair_value*>(
               &_pair_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(pair_value& a, pair_value& b) {
    a.Swap(&b);
  }
  inline void Swap(pair_value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pair_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  pair_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<pair_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const pair_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const pair_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pair_value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.pair_value";
  }
  protected:
  explicit pair_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:test_2.pair_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class field_type_pair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.field_type_pair) */ {
 public:
  inline field_type_pair() : field_type_pair(nullptr) {}
  ~field_type_pair() override;
  explicit constexpr field_type_pair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  field_type_pair(const field_type_pair& from);
  field_type_pair(field_type_pair&& from) noexcept
    : field_type_pair() {
    *this = ::std::move(from);
  }

  inline field_type_pair& operator=(const field_type_pair& from) {
    CopyFrom(from);
    return *this;
  }
  inline field_type_pair& operator=(field_type_pair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const field_type_pair& default_instance() {
    return *internal_default_instance();
  }
  static inline const field_type_pair* internal_default_instance() {
    return reinterpret_cast<const field_type_pair*>(
               &_field_type_pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(field_type_pair& a, field_type_pair& b) {
    a.Swap(&b);
  }
  inline void Swap(field_type_pair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(field_type_pair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  field_type_pair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<field_type_pair>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const field_type_pair& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const field_type_pair& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(field_type_pair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.field_type_pair";
  }
  protected:
  explicit field_type_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kLuaTypeFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int32 lua_type = 2;
  void clear_lua_type();
  int32_t lua_type() const;
  void set_lua_type(int32_t value);
  private:
  int32_t _internal_lua_type() const;
  void _internal_set_lua_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.field_type_pair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int32_t lua_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class row_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.row_data) */ {
 public:
  inline row_data() : row_data(nullptr) {}
  ~row_data() override;
  explicit constexpr row_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  row_data(const row_data& from);
  row_data(row_data&& from) noexcept
    : row_data() {
    *this = ::std::move(from);
  }

  inline row_data& operator=(const row_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline row_data& operator=(row_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const row_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const row_data* internal_default_instance() {
    return reinterpret_cast<const row_data*>(
               &_row_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(row_data& a, row_data& b) {
    a.Swap(&b);
  }
  inline void Swap(row_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(row_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  row_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<row_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const row_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const row_data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(row_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.row_data";
  }
  protected:
  explicit row_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // repeated .test_2.pair_value pair = 2;
  int pair_size() const;
  private:
  int _internal_pair_size() const;
  public:
  void clear_pair();
  ::test_2::pair_value* mutable_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::pair_value >*
      mutable_pair();
  private:
  const ::test_2::pair_value& _internal_pair(int index) const;
  ::test_2::pair_value* _internal_add_pair();
  public:
  const ::test_2::pair_value& pair(int index) const;
  ::test_2::pair_value* add_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::pair_value >&
      pair() const;

  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:test_2.row_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::pair_value > pair_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class field_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.field_info) */ {
 public:
  inline field_info() : field_info(nullptr) {}
  ~field_info() override;
  explicit constexpr field_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  field_info(const field_info& from);
  field_info(field_info&& from) noexcept
    : field_info() {
    *this = ::std::move(from);
  }

  inline field_info& operator=(const field_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline field_info& operator=(field_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const field_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const field_info* internal_default_instance() {
    return reinterpret_cast<const field_info*>(
               &_field_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(field_info& a, field_info& b) {
    a.Swap(&b);
  }
  inline void Swap(field_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(field_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  field_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<field_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const field_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const field_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(field_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.field_info";
  }
  protected:
  explicit field_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldNameFieldNumber = 1,
    kFieldDescFieldNumber = 2,
    kFieldLinkFieldNumber = 3,
  };
  // bytes field_name = 1;
  void clear_field_name();
  const std::string& field_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_name();
  PROTOBUF_NODISCARD std::string* release_field_name();
  void set_allocated_field_name(std::string* field_name);
  private:
  const std::string& _internal_field_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_name(const std::string& value);
  std::string* _internal_mutable_field_name();
  public:

  // bytes field_desc = 2;
  void clear_field_desc();
  const std::string& field_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_desc();
  PROTOBUF_NODISCARD std::string* release_field_desc();
  void set_allocated_field_desc(std::string* field_desc);
  private:
  const std::string& _internal_field_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_desc(const std::string& value);
  std::string* _internal_mutable_field_desc();
  public:

  // bytes field_link = 3;
  void clear_field_link();
  const std::string& field_link() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_field_link(ArgT0&& arg0, ArgT... args);
  std::string* mutable_field_link();
  PROTOBUF_NODISCARD std::string* release_field_link();
  void set_allocated_field_link(std::string* field_link);
  private:
  const std::string& _internal_field_link() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_field_link(const std::string& value);
  std::string* _internal_mutable_field_link();
  public:

  // @@protoc_insertion_point(class_scope:test_2.field_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_desc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_link_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class field_squence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.field_squence) */ {
 public:
  inline field_squence() : field_squence(nullptr) {}
  ~field_squence() override;
  explicit constexpr field_squence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  field_squence(const field_squence& from);
  field_squence(field_squence&& from) noexcept
    : field_squence() {
    *this = ::std::move(from);
  }

  inline field_squence& operator=(const field_squence& from) {
    CopyFrom(from);
    return *this;
  }
  inline field_squence& operator=(field_squence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const field_squence& default_instance() {
    return *internal_default_instance();
  }
  static inline const field_squence* internal_default_instance() {
    return reinterpret_cast<const field_squence*>(
               &_field_squence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(field_squence& a, field_squence& b) {
    a.Swap(&b);
  }
  inline void Swap(field_squence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(field_squence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  field_squence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<field_squence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const field_squence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const field_squence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(field_squence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.field_squence";
  }
  protected:
  explicit field_squence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // repeated .test_2.field_info infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::test_2::field_info* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_info >*
      mutable_infos();
  private:
  const ::test_2::field_info& _internal_infos(int index) const;
  ::test_2::field_info* _internal_add_infos();
  public:
  const ::test_2::field_info& infos(int index) const;
  ::test_2::field_info* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_info >&
      infos() const;

  // string index = 1;
  void clear_index();
  const std::string& index() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_index(ArgT0&& arg0, ArgT... args);
  std::string* mutable_index();
  PROTOBUF_NODISCARD std::string* release_index();
  void set_allocated_index(std::string* index);
  private:
  const std::string& _internal_index() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // @@protoc_insertion_point(class_scope:test_2.field_squence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_info > infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class table_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.table_data) */ {
 public:
  inline table_data() : table_data(nullptr) {}
  ~table_data() override;
  explicit constexpr table_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  table_data(const table_data& from);
  table_data(table_data&& from) noexcept
    : table_data() {
    *this = ::std::move(from);
  }

  inline table_data& operator=(const table_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_data& operator=(table_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const table_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const table_data* internal_default_instance() {
    return reinterpret_cast<const table_data*>(
               &_table_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(table_data& a, table_data& b) {
    a.Swap(&b);
  }
  inline void Swap(table_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  table_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<table_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const table_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const table_data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.table_data";
  }
  protected:
  explicit table_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledNamesFieldNumber = 4,
    kFiledTypesFieldNumber = 5,
    kRowListsFieldNumber = 6,
    kFiledSequencesFieldNumber = 7,
    kTableNameFieldNumber = 1,
    kRowCountFieldNumber = 2,
    kColumnCountFieldNumber = 3,
  };
  // repeated bytes filed_names = 4;
  int filed_names_size() const;
  private:
  int _internal_filed_names_size() const;
  public:
  void clear_filed_names();
  const std::string& filed_names(int index) const;
  std::string* mutable_filed_names(int index);
  void set_filed_names(int index, const std::string& value);
  void set_filed_names(int index, std::string&& value);
  void set_filed_names(int index, const char* value);
  void set_filed_names(int index, const void* value, size_t size);
  std::string* add_filed_names();
  void add_filed_names(const std::string& value);
  void add_filed_names(std::string&& value);
  void add_filed_names(const char* value);
  void add_filed_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filed_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filed_names();
  private:
  const std::string& _internal_filed_names(int index) const;
  std::string* _internal_add_filed_names();
  public:

  // repeated .test_2.field_type_pair filed_types = 5;
  int filed_types_size() const;
  private:
  int _internal_filed_types_size() const;
  public:
  void clear_filed_types();
  ::test_2::field_type_pair* mutable_filed_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_pair >*
      mutable_filed_types();
  private:
  const ::test_2::field_type_pair& _internal_filed_types(int index) const;
  ::test_2::field_type_pair* _internal_add_filed_types();
  public:
  const ::test_2::field_type_pair& filed_types(int index) const;
  ::test_2::field_type_pair* add_filed_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_pair >&
      filed_types() const;

  // repeated .test_2.row_data row_lists = 6;
  int row_lists_size() const;
  private:
  int _internal_row_lists_size() const;
  public:
  void clear_row_lists();
  ::test_2::row_data* mutable_row_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >*
      mutable_row_lists();
  private:
  const ::test_2::row_data& _internal_row_lists(int index) const;
  ::test_2::row_data* _internal_add_row_lists();
  public:
  const ::test_2::row_data& row_lists(int index) const;
  ::test_2::row_data* add_row_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >&
      row_lists() const;

  // repeated .test_2.field_squence filed_sequences = 7;
  int filed_sequences_size() const;
  private:
  int _internal_filed_sequences_size() const;
  public:
  void clear_filed_sequences();
  ::test_2::field_squence* mutable_filed_sequences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
      mutable_filed_sequences();
  private:
  const ::test_2::field_squence& _internal_filed_sequences(int index) const;
  ::test_2::field_squence* _internal_add_filed_sequences();
  public:
  const ::test_2::field_squence& filed_sequences(int index) const;
  ::test_2::field_squence* add_filed_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
      filed_sequences() const;

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // int32 row_count = 2;
  void clear_row_count();
  int32_t row_count() const;
  void set_row_count(int32_t value);
  private:
  int32_t _internal_row_count() const;
  void _internal_set_row_count(int32_t value);
  public:

  // int32 column_count = 3;
  void clear_column_count();
  int32_t column_count() const;
  void set_column_count(int32_t value);
  private:
  int32_t _internal_column_count() const;
  void _internal_set_column_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.table_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filed_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_pair > filed_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data > row_lists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence > filed_sequences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  int32_t row_count_;
  int32_t column_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class table_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.table_info) */ {
 public:
  inline table_info() : table_info(nullptr) {}
  ~table_info() override;
  explicit constexpr table_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  table_info(const table_info& from);
  table_info(table_info&& from) noexcept
    : table_info() {
    *this = ::std::move(from);
  }

  inline table_info& operator=(const table_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_info& operator=(table_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const table_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const table_info* internal_default_instance() {
    return reinterpret_cast<const table_info*>(
               &_table_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(table_info& a, table_info& b) {
    a.Swap(&b);
  }
  inline void Swap(table_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  table_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<table_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const table_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const table_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.table_info";
  }
  protected:
  explicit table_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledSequencesFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated .test_2.field_squence filed_sequences = 2;
  int filed_sequences_size() const;
  private:
  int _internal_filed_sequences_size() const;
  public:
  void clear_filed_sequences();
  ::test_2::field_squence* mutable_filed_sequences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
      mutable_filed_sequences();
  private:
  const ::test_2::field_squence& _internal_filed_sequences(int index) const;
  ::test_2::field_squence* _internal_add_filed_sequences();
  public:
  const ::test_2::field_squence& filed_sequences(int index) const;
  ::test_2::field_squence* add_filed_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
      filed_sequences() const;

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.table_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence > filed_sequences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_save_table_data_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.client_save_table_data_request) */ {
 public:
  inline client_save_table_data_request() : client_save_table_data_request(nullptr) {}
  ~client_save_table_data_request() override;
  explicit constexpr client_save_table_data_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_save_table_data_request(const client_save_table_data_request& from);
  client_save_table_data_request(client_save_table_data_request&& from) noexcept
    : client_save_table_data_request() {
    *this = ::std::move(from);
  }

  inline client_save_table_data_request& operator=(const client_save_table_data_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_save_table_data_request& operator=(client_save_table_data_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_save_table_data_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_save_table_data_request* internal_default_instance() {
    return reinterpret_cast<const client_save_table_data_request*>(
               &_client_save_table_data_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(client_save_table_data_request& a, client_save_table_data_request& b) {
    a.Swap(&b);
  }
  inline void Swap(client_save_table_data_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_save_table_data_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_save_table_data_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_save_table_data_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_save_table_data_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_save_table_data_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_save_table_data_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_save_table_data_request";
  }
  protected:
  explicit client_save_table_data_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowListsFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated .test_2.row_data row_lists = 2;
  int row_lists_size() const;
  private:
  int _internal_row_lists_size() const;
  public:
  void clear_row_lists();
  ::test_2::row_data* mutable_row_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >*
      mutable_row_lists();
  private:
  const ::test_2::row_data& _internal_row_lists(int index) const;
  ::test_2::row_data* _internal_add_row_lists();
  public:
  const ::test_2::row_data& row_lists(int index) const;
  ::test_2::row_data* add_row_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >&
      row_lists() const;

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.client_save_table_data_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data > row_lists_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class send_shell_option_print_notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.send_shell_option_print_notify) */ {
 public:
  inline send_shell_option_print_notify() : send_shell_option_print_notify(nullptr) {}
  ~send_shell_option_print_notify() override;
  explicit constexpr send_shell_option_print_notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  send_shell_option_print_notify(const send_shell_option_print_notify& from);
  send_shell_option_print_notify(send_shell_option_print_notify&& from) noexcept
    : send_shell_option_print_notify() {
    *this = ::std::move(from);
  }

  inline send_shell_option_print_notify& operator=(const send_shell_option_print_notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_shell_option_print_notify& operator=(send_shell_option_print_notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const send_shell_option_print_notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const send_shell_option_print_notify* internal_default_instance() {
    return reinterpret_cast<const send_shell_option_print_notify*>(
               &_send_shell_option_print_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(send_shell_option_print_notify& a, send_shell_option_print_notify& b) {
    a.Swap(&b);
  }
  inline void Swap(send_shell_option_print_notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_shell_option_print_notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  send_shell_option_print_notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<send_shell_option_print_notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const send_shell_option_print_notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const send_shell_option_print_notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_shell_option_print_notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.send_shell_option_print_notify";
  }
  protected:
  explicit send_shell_option_print_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kFlagFieldNumber = 2,
  };
  // bytes line = 1;
  void clear_line();
  const std::string& line() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_line(ArgT0&& arg0, ArgT... args);
  std::string* mutable_line();
  PROTOBUF_NODISCARD std::string* release_line();
  void set_allocated_line(std::string* line);
  private:
  const std::string& _internal_line() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_line(const std::string& value);
  std::string* _internal_mutable_line();
  public:

  // int32 flag = 2;
  void clear_flag();
  int32_t flag() const;
  void set_flag(int32_t value);
  private:
  int32_t _internal_flag() const;
  void _internal_set_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.send_shell_option_print_notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr line_;
  int32_t flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_save_table_info_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.client_save_table_info_request) */ {
 public:
  inline client_save_table_info_request() : client_save_table_info_request(nullptr) {}
  ~client_save_table_info_request() override;
  explicit constexpr client_save_table_info_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_save_table_info_request(const client_save_table_info_request& from);
  client_save_table_info_request(client_save_table_info_request&& from) noexcept
    : client_save_table_info_request() {
    *this = ::std::move(from);
  }

  inline client_save_table_info_request& operator=(const client_save_table_info_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_save_table_info_request& operator=(client_save_table_info_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_save_table_info_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_save_table_info_request* internal_default_instance() {
    return reinterpret_cast<const client_save_table_info_request*>(
               &_client_save_table_info_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(client_save_table_info_request& a, client_save_table_info_request& b) {
    a.Swap(&b);
  }
  inline void Swap(client_save_table_info_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_save_table_info_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_save_table_info_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_save_table_info_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_save_table_info_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_save_table_info_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_save_table_info_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_save_table_info_request";
  }
  protected:
  explicit client_save_table_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldSquencesFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated .test_2.field_squence field_squences = 2;
  int field_squences_size() const;
  private:
  int _internal_field_squences_size() const;
  public:
  void clear_field_squences();
  ::test_2::field_squence* mutable_field_squences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
      mutable_field_squences();
  private:
  const ::test_2::field_squence& _internal_field_squences(int index) const;
  ::test_2::field_squence* _internal_add_field_squences();
  public:
  const ::test_2::field_squence& field_squences(int index) const;
  ::test_2::field_squence* add_field_squences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
      field_squences() const;

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.client_save_table_info_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence > field_squences_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class send_server_current_time_nofity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.send_server_current_time_nofity) */ {
 public:
  inline send_server_current_time_nofity() : send_server_current_time_nofity(nullptr) {}
  ~send_server_current_time_nofity() override;
  explicit constexpr send_server_current_time_nofity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  send_server_current_time_nofity(const send_server_current_time_nofity& from);
  send_server_current_time_nofity(send_server_current_time_nofity&& from) noexcept
    : send_server_current_time_nofity() {
    *this = ::std::move(from);
  }

  inline send_server_current_time_nofity& operator=(const send_server_current_time_nofity& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_server_current_time_nofity& operator=(send_server_current_time_nofity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const send_server_current_time_nofity& default_instance() {
    return *internal_default_instance();
  }
  static inline const send_server_current_time_nofity* internal_default_instance() {
    return reinterpret_cast<const send_server_current_time_nofity*>(
               &_send_server_current_time_nofity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(send_server_current_time_nofity& a, send_server_current_time_nofity& b) {
    a.Swap(&b);
  }
  inline void Swap(send_server_current_time_nofity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_server_current_time_nofity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  send_server_current_time_nofity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<send_server_current_time_nofity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const send_server_current_time_nofity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const send_server_current_time_nofity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_server_current_time_nofity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.send_server_current_time_nofity";
  }
  protected:
  explicit send_server_current_time_nofity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.send_server_current_time_nofity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_modify_server_time_quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.client_modify_server_time_quest) */ {
 public:
  inline client_modify_server_time_quest() : client_modify_server_time_quest(nullptr) {}
  ~client_modify_server_time_quest() override;
  explicit constexpr client_modify_server_time_quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_modify_server_time_quest(const client_modify_server_time_quest& from);
  client_modify_server_time_quest(client_modify_server_time_quest&& from) noexcept
    : client_modify_server_time_quest() {
    *this = ::std::move(from);
  }

  inline client_modify_server_time_quest& operator=(const client_modify_server_time_quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_modify_server_time_quest& operator=(client_modify_server_time_quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_modify_server_time_quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_modify_server_time_quest* internal_default_instance() {
    return reinterpret_cast<const client_modify_server_time_quest*>(
               &_client_modify_server_time_quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(client_modify_server_time_quest& a, client_modify_server_time_quest& b) {
    a.Swap(&b);
  }
  inline void Swap(client_modify_server_time_quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_modify_server_time_quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_modify_server_time_quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_modify_server_time_quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_modify_server_time_quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_modify_server_time_quest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_modify_server_time_quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_modify_server_time_quest";
  }
  protected:
  explicit client_modify_server_time_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // int64 time = 1;
  void clear_time();
  int64_t time() const;
  void set_time(int64_t value);
  private:
  int64_t _internal_time() const;
  void _internal_set_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.client_modify_server_time_quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_lua_list_data_quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.client_lua_list_data_quest) */ {
 public:
  inline client_lua_list_data_quest() : client_lua_list_data_quest(nullptr) {}
  ~client_lua_list_data_quest() override;
  explicit constexpr client_lua_list_data_quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_lua_list_data_quest(const client_lua_list_data_quest& from);
  client_lua_list_data_quest(client_lua_list_data_quest&& from) noexcept
    : client_lua_list_data_quest() {
    *this = ::std::move(from);
  }

  inline client_lua_list_data_quest& operator=(const client_lua_list_data_quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_lua_list_data_quest& operator=(client_lua_list_data_quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_lua_list_data_quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_lua_list_data_quest* internal_default_instance() {
    return reinterpret_cast<const client_lua_list_data_quest*>(
               &_client_lua_list_data_quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(client_lua_list_data_quest& a, client_lua_list_data_quest& b) {
    a.Swap(&b);
  }
  inline void Swap(client_lua_list_data_quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_lua_list_data_quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_lua_list_data_quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_lua_list_data_quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const client_lua_list_data_quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const client_lua_list_data_quest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(client_lua_list_data_quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_lua_list_data_quest";
  }
  protected:
  explicit client_lua_list_data_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
  };
  // bytes file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_name();
  PROTOBUF_NODISCARD std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.client_lua_list_data_quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class field_type_key_value final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.field_type_key_value) */ {
 public:
  inline field_type_key_value() : field_type_key_value(nullptr) {}
  ~field_type_key_value() override;
  explicit constexpr field_type_key_value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  field_type_key_value(const field_type_key_value& from);
  field_type_key_value(field_type_key_value&& from) noexcept
    : field_type_key_value() {
    *this = ::std::move(from);
  }

  inline field_type_key_value& operator=(const field_type_key_value& from) {
    CopyFrom(from);
    return *this;
  }
  inline field_type_key_value& operator=(field_type_key_value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const field_type_key_value& default_instance() {
    return *internal_default_instance();
  }
  static inline const field_type_key_value* internal_default_instance() {
    return reinterpret_cast<const field_type_key_value*>(
               &_field_type_key_value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(field_type_key_value& a, field_type_key_value& b) {
    a.Swap(&b);
  }
  inline void Swap(field_type_key_value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(field_type_key_value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  field_type_key_value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<field_type_key_value>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const field_type_key_value& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const field_type_key_value& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(field_type_key_value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.field_type_key_value";
  }
  protected:
  explicit field_type_key_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // int32 type = 3;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.field_type_key_value)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class send_lua_list_data_notify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.send_lua_list_data_notify) */ {
 public:
  inline send_lua_list_data_notify() : send_lua_list_data_notify(nullptr) {}
  ~send_lua_list_data_notify() override;
  explicit constexpr send_lua_list_data_notify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  send_lua_list_data_notify(const send_lua_list_data_notify& from);
  send_lua_list_data_notify(send_lua_list_data_notify&& from) noexcept
    : send_lua_list_data_notify() {
    *this = ::std::move(from);
  }

  inline send_lua_list_data_notify& operator=(const send_lua_list_data_notify& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_lua_list_data_notify& operator=(send_lua_list_data_notify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const send_lua_list_data_notify& default_instance() {
    return *internal_default_instance();
  }
  static inline const send_lua_list_data_notify* internal_default_instance() {
    return reinterpret_cast<const send_lua_list_data_notify*>(
               &_send_lua_list_data_notify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(send_lua_list_data_notify& a, send_lua_list_data_notify& b) {
    a.Swap(&b);
  }
  inline void Swap(send_lua_list_data_notify* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_lua_list_data_notify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  send_lua_list_data_notify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<send_lua_list_data_notify>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const send_lua_list_data_notify& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const send_lua_list_data_notify& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_lua_list_data_notify* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.send_lua_list_data_notify";
  }
  protected:
  explicit send_lua_list_data_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledTypesFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated .test_2.field_type_key_value filed_types = 2;
  int filed_types_size() const;
  private:
  int _internal_filed_types_size() const;
  public:
  void clear_filed_types();
  ::test_2::field_type_key_value* mutable_filed_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >*
      mutable_filed_types();
  private:
  const ::test_2::field_type_key_value& _internal_filed_types(int index) const;
  ::test_2::field_type_key_value* _internal_add_filed_types();
  public:
  const ::test_2::field_type_key_value& filed_types(int index) const;
  ::test_2::field_type_key_value* add_filed_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >&
      filed_types() const;

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.send_lua_list_data_notify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value > filed_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class save_lua_list_data_request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.save_lua_list_data_request) */ {
 public:
  inline save_lua_list_data_request() : save_lua_list_data_request(nullptr) {}
  ~save_lua_list_data_request() override;
  explicit constexpr save_lua_list_data_request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  save_lua_list_data_request(const save_lua_list_data_request& from);
  save_lua_list_data_request(save_lua_list_data_request&& from) noexcept
    : save_lua_list_data_request() {
    *this = ::std::move(from);
  }

  inline save_lua_list_data_request& operator=(const save_lua_list_data_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline save_lua_list_data_request& operator=(save_lua_list_data_request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const save_lua_list_data_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const save_lua_list_data_request* internal_default_instance() {
    return reinterpret_cast<const save_lua_list_data_request*>(
               &_save_lua_list_data_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(save_lua_list_data_request& a, save_lua_list_data_request& b) {
    a.Swap(&b);
  }
  inline void Swap(save_lua_list_data_request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(save_lua_list_data_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  save_lua_list_data_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<save_lua_list_data_request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const save_lua_list_data_request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const save_lua_list_data_request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(save_lua_list_data_request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.save_lua_list_data_request";
  }
  protected:
  explicit save_lua_list_data_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledTypesFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated .test_2.field_type_key_value filed_types = 2;
  int filed_types_size() const;
  private:
  int _internal_filed_types_size() const;
  public:
  void clear_filed_types();
  ::test_2::field_type_key_value* mutable_filed_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >*
      mutable_filed_types();
  private:
  const ::test_2::field_type_key_value& _internal_filed_types(int index) const;
  ::test_2::field_type_key_value* _internal_add_filed_types();
  public:
  const ::test_2::field_type_key_value& filed_types(int index) const;
  ::test_2::field_type_key_value* add_filed_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >&
      filed_types() const;

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.save_lua_list_data_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value > filed_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class client_field_link_info_quest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:test_2.client_field_link_info_quest) */ {
 public:
  inline client_field_link_info_quest() : client_field_link_info_quest(nullptr) {}
  explicit constexpr client_field_link_info_quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  client_field_link_info_quest(const client_field_link_info_quest& from);
  client_field_link_info_quest(client_field_link_info_quest&& from) noexcept
    : client_field_link_info_quest() {
    *this = ::std::move(from);
  }

  inline client_field_link_info_quest& operator=(const client_field_link_info_quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline client_field_link_info_quest& operator=(client_field_link_info_quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const client_field_link_info_quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const client_field_link_info_quest* internal_default_instance() {
    return reinterpret_cast<const client_field_link_info_quest*>(
               &_client_field_link_info_quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(client_field_link_info_quest& a, client_field_link_info_quest& b) {
    a.Swap(&b);
  }
  inline void Swap(client_field_link_info_quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(client_field_link_info_quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  client_field_link_info_quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<client_field_link_info_quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const client_field_link_info_quest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const client_field_link_info_quest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.client_field_link_info_quest";
  }
  protected:
  explicit client_field_link_info_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:test_2.client_field_link_info_quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class table_field_list final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.table_field_list) */ {
 public:
  inline table_field_list() : table_field_list(nullptr) {}
  ~table_field_list() override;
  explicit constexpr table_field_list(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  table_field_list(const table_field_list& from);
  table_field_list(table_field_list&& from) noexcept
    : table_field_list() {
    *this = ::std::move(from);
  }

  inline table_field_list& operator=(const table_field_list& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_field_list& operator=(table_field_list&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const table_field_list& default_instance() {
    return *internal_default_instance();
  }
  static inline const table_field_list* internal_default_instance() {
    return reinterpret_cast<const table_field_list*>(
               &_table_field_list_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(table_field_list& a, table_field_list& b) {
    a.Swap(&b);
  }
  inline void Swap(table_field_list* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table_field_list* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  table_field_list* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<table_field_list>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const table_field_list& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const table_field_list& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_field_list* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.table_field_list";
  }
  protected:
  explicit table_field_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kTableNameFieldNumber = 1,
  };
  // repeated bytes fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  const std::string& fields(int index) const;
  std::string* mutable_fields(int index);
  void set_fields(int index, const std::string& value);
  void set_fields(int index, std::string&& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const void* value, size_t size);
  std::string* add_fields();
  void add_fields(const std::string& value);
  void add_fields(std::string&& value);
  void add_fields(const char* value);
  void add_fields(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fields() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fields();
  private:
  const std::string& _internal_fields(int index) const;
  std::string* _internal_add_fields();
  public:

  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // @@protoc_insertion_point(class_scope:test_2.table_field_list)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fields_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class send_field_link_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.send_field_link_info) */ {
 public:
  inline send_field_link_info() : send_field_link_info(nullptr) {}
  ~send_field_link_info() override;
  explicit constexpr send_field_link_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  send_field_link_info(const send_field_link_info& from);
  send_field_link_info(send_field_link_info&& from) noexcept
    : send_field_link_info() {
    *this = ::std::move(from);
  }

  inline send_field_link_info& operator=(const send_field_link_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_field_link_info& operator=(send_field_link_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const send_field_link_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const send_field_link_info* internal_default_instance() {
    return reinterpret_cast<const send_field_link_info*>(
               &_send_field_link_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(send_field_link_info& a, send_field_link_info& b) {
    a.Swap(&b);
  }
  inline void Swap(send_field_link_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_field_link_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  send_field_link_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<send_field_link_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const send_field_link_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const send_field_link_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_field_link_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.send_field_link_info";
  }
  protected:
  explicit send_field_link_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kListFieldNumber = 2,
  };
  // repeated .test_2.table_field_list table = 1;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  ::test_2::table_field_list* mutable_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >*
      mutable_table();
  private:
  const ::test_2::table_field_list& _internal_table(int index) const;
  ::test_2::table_field_list* _internal_add_table();
  public:
  const ::test_2::table_field_list& table(int index) const;
  ::test_2::table_field_list* add_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >&
      table() const;

  // repeated .test_2.table_field_list list = 2;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::test_2::table_field_list* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >*
      mutable_list();
  private:
  const ::test_2::table_field_list& _internal_list(int index) const;
  ::test_2::table_field_list* _internal_add_list();
  public:
  const ::test_2::table_field_list& list(int index) const;
  ::test_2::table_field_list* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >&
      list() const;

  // @@protoc_insertion_point(class_scope:test_2.send_field_link_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list > table_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class process_statue_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.process_statue_info) */ {
 public:
  inline process_statue_info() : process_statue_info(nullptr) {}
  ~process_statue_info() override;
  explicit constexpr process_statue_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  process_statue_info(const process_statue_info& from);
  process_statue_info(process_statue_info&& from) noexcept
    : process_statue_info() {
    *this = ::std::move(from);
  }

  inline process_statue_info& operator=(const process_statue_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline process_statue_info& operator=(process_statue_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const process_statue_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const process_statue_info* internal_default_instance() {
    return reinterpret_cast<const process_statue_info*>(
               &_process_statue_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(process_statue_info& a, process_statue_info& b) {
    a.Swap(&b);
  }
  inline void Swap(process_statue_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(process_statue_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  process_statue_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<process_statue_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const process_statue_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const process_statue_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(process_statue_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.process_statue_info";
  }
  protected:
  explicit process_statue_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessNameFieldNumber = 2,
    kStatueFieldNumber = 3,
  };
  // bytes process_name = 2;
  void clear_process_name();
  const std::string& process_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_process_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_process_name();
  PROTOBUF_NODISCARD std::string* release_process_name();
  void set_allocated_process_name(std::string* process_name);
  private:
  const std::string& _internal_process_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_process_name(const std::string& value);
  std::string* _internal_mutable_process_name();
  public:

  // int32 statue = 3;
  void clear_statue();
  int32_t statue() const;
  void set_statue(int32_t value);
  private:
  int32_t _internal_statue() const;
  void _internal_set_statue(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.process_statue_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_name_;
  int32_t statue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class send_process_listening_status_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.send_process_listening_status_info) */ {
 public:
  inline send_process_listening_status_info() : send_process_listening_status_info(nullptr) {}
  ~send_process_listening_status_info() override;
  explicit constexpr send_process_listening_status_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  send_process_listening_status_info(const send_process_listening_status_info& from);
  send_process_listening_status_info(send_process_listening_status_info&& from) noexcept
    : send_process_listening_status_info() {
    *this = ::std::move(from);
  }

  inline send_process_listening_status_info& operator=(const send_process_listening_status_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline send_process_listening_status_info& operator=(send_process_listening_status_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const send_process_listening_status_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const send_process_listening_status_info* internal_default_instance() {
    return reinterpret_cast<const send_process_listening_status_info*>(
               &_send_process_listening_status_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(send_process_listening_status_info& a, send_process_listening_status_info& b) {
    a.Swap(&b);
  }
  inline void Swap(send_process_listening_status_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(send_process_listening_status_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  send_process_listening_status_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<send_process_listening_status_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const send_process_listening_status_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const send_process_listening_status_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(send_process_listening_status_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.send_process_listening_status_info";
  }
  protected:
  explicit send_process_listening_status_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .test_2.process_statue_info infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::test_2::process_statue_info* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::process_statue_info >*
      mutable_infos();
  private:
  const ::test_2::process_statue_info& _internal_infos(int index) const;
  ::test_2::process_statue_info* _internal_add_infos();
  public:
  const ::test_2::process_statue_info& infos(int index) const;
  ::test_2::process_statue_info* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::process_statue_info >&
      infos() const;

  // @@protoc_insertion_point(class_scope:test_2.send_process_listening_status_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::process_statue_info > infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// client_login_request

// -------------------------------------------------------------------

// server_send_file_tree_notify

// repeated bytes lua_file_names = 1;
inline int server_send_file_tree_notify::_internal_lua_file_names_size() const {
  return lua_file_names_.size();
}
inline int server_send_file_tree_notify::lua_file_names_size() const {
  return _internal_lua_file_names_size();
}
inline void server_send_file_tree_notify::clear_lua_file_names() {
  lua_file_names_.Clear();
}
inline std::string* server_send_file_tree_notify::add_lua_file_names() {
  std::string* _s = _internal_add_lua_file_names();
  // @@protoc_insertion_point(field_add_mutable:test_2.server_send_file_tree_notify.lua_file_names)
  return _s;
}
inline const std::string& server_send_file_tree_notify::_internal_lua_file_names(int index) const {
  return lua_file_names_.Get(index);
}
inline const std::string& server_send_file_tree_notify::lua_file_names(int index) const {
  // @@protoc_insertion_point(field_get:test_2.server_send_file_tree_notify.lua_file_names)
  return _internal_lua_file_names(index);
}
inline std::string* server_send_file_tree_notify::mutable_lua_file_names(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.server_send_file_tree_notify.lua_file_names)
  return lua_file_names_.Mutable(index);
}
inline void server_send_file_tree_notify::set_lua_file_names(int index, const std::string& value) {
  lua_file_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.server_send_file_tree_notify.lua_file_names)
}
inline void server_send_file_tree_notify::set_lua_file_names(int index, std::string&& value) {
  lua_file_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.server_send_file_tree_notify.lua_file_names)
}
inline void server_send_file_tree_notify::set_lua_file_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lua_file_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.server_send_file_tree_notify.lua_file_names)
}
inline void server_send_file_tree_notify::set_lua_file_names(int index, const void* value, size_t size) {
  lua_file_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.server_send_file_tree_notify.lua_file_names)
}
inline std::string* server_send_file_tree_notify::_internal_add_lua_file_names() {
  return lua_file_names_.Add();
}
inline void server_send_file_tree_notify::add_lua_file_names(const std::string& value) {
  lua_file_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.server_send_file_tree_notify.lua_file_names)
}
inline void server_send_file_tree_notify::add_lua_file_names(std::string&& value) {
  lua_file_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.server_send_file_tree_notify.lua_file_names)
}
inline void server_send_file_tree_notify::add_lua_file_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lua_file_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.server_send_file_tree_notify.lua_file_names)
}
inline void server_send_file_tree_notify::add_lua_file_names(const void* value, size_t size) {
  lua_file_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.server_send_file_tree_notify.lua_file_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
server_send_file_tree_notify::lua_file_names() const {
  // @@protoc_insertion_point(field_list:test_2.server_send_file_tree_notify.lua_file_names)
  return lua_file_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
server_send_file_tree_notify::mutable_lua_file_names() {
  // @@protoc_insertion_point(field_mutable_list:test_2.server_send_file_tree_notify.lua_file_names)
  return &lua_file_names_;
}

// repeated bytes lua_table_file_names = 2;
inline int server_send_file_tree_notify::_internal_lua_table_file_names_size() const {
  return lua_table_file_names_.size();
}
inline int server_send_file_tree_notify::lua_table_file_names_size() const {
  return _internal_lua_table_file_names_size();
}
inline void server_send_file_tree_notify::clear_lua_table_file_names() {
  lua_table_file_names_.Clear();
}
inline std::string* server_send_file_tree_notify::add_lua_table_file_names() {
  std::string* _s = _internal_add_lua_table_file_names();
  // @@protoc_insertion_point(field_add_mutable:test_2.server_send_file_tree_notify.lua_table_file_names)
  return _s;
}
inline const std::string& server_send_file_tree_notify::_internal_lua_table_file_names(int index) const {
  return lua_table_file_names_.Get(index);
}
inline const std::string& server_send_file_tree_notify::lua_table_file_names(int index) const {
  // @@protoc_insertion_point(field_get:test_2.server_send_file_tree_notify.lua_table_file_names)
  return _internal_lua_table_file_names(index);
}
inline std::string* server_send_file_tree_notify::mutable_lua_table_file_names(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.server_send_file_tree_notify.lua_table_file_names)
  return lua_table_file_names_.Mutable(index);
}
inline void server_send_file_tree_notify::set_lua_table_file_names(int index, const std::string& value) {
  lua_table_file_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline void server_send_file_tree_notify::set_lua_table_file_names(int index, std::string&& value) {
  lua_table_file_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline void server_send_file_tree_notify::set_lua_table_file_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lua_table_file_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline void server_send_file_tree_notify::set_lua_table_file_names(int index, const void* value, size_t size) {
  lua_table_file_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline std::string* server_send_file_tree_notify::_internal_add_lua_table_file_names() {
  return lua_table_file_names_.Add();
}
inline void server_send_file_tree_notify::add_lua_table_file_names(const std::string& value) {
  lua_table_file_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline void server_send_file_tree_notify::add_lua_table_file_names(std::string&& value) {
  lua_table_file_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline void server_send_file_tree_notify::add_lua_table_file_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  lua_table_file_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline void server_send_file_tree_notify::add_lua_table_file_names(const void* value, size_t size) {
  lua_table_file_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.server_send_file_tree_notify.lua_table_file_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
server_send_file_tree_notify::lua_table_file_names() const {
  // @@protoc_insertion_point(field_list:test_2.server_send_file_tree_notify.lua_table_file_names)
  return lua_table_file_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
server_send_file_tree_notify::mutable_lua_table_file_names() {
  // @@protoc_insertion_point(field_mutable_list:test_2.server_send_file_tree_notify.lua_table_file_names)
  return &lua_table_file_names_;
}

// repeated bytes group_names = 3;
inline int server_send_file_tree_notify::_internal_group_names_size() const {
  return group_names_.size();
}
inline int server_send_file_tree_notify::group_names_size() const {
  return _internal_group_names_size();
}
inline void server_send_file_tree_notify::clear_group_names() {
  group_names_.Clear();
}
inline std::string* server_send_file_tree_notify::add_group_names() {
  std::string* _s = _internal_add_group_names();
  // @@protoc_insertion_point(field_add_mutable:test_2.server_send_file_tree_notify.group_names)
  return _s;
}
inline const std::string& server_send_file_tree_notify::_internal_group_names(int index) const {
  return group_names_.Get(index);
}
inline const std::string& server_send_file_tree_notify::group_names(int index) const {
  // @@protoc_insertion_point(field_get:test_2.server_send_file_tree_notify.group_names)
  return _internal_group_names(index);
}
inline std::string* server_send_file_tree_notify::mutable_group_names(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.server_send_file_tree_notify.group_names)
  return group_names_.Mutable(index);
}
inline void server_send_file_tree_notify::set_group_names(int index, const std::string& value) {
  group_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.server_send_file_tree_notify.group_names)
}
inline void server_send_file_tree_notify::set_group_names(int index, std::string&& value) {
  group_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.server_send_file_tree_notify.group_names)
}
inline void server_send_file_tree_notify::set_group_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.server_send_file_tree_notify.group_names)
}
inline void server_send_file_tree_notify::set_group_names(int index, const void* value, size_t size) {
  group_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.server_send_file_tree_notify.group_names)
}
inline std::string* server_send_file_tree_notify::_internal_add_group_names() {
  return group_names_.Add();
}
inline void server_send_file_tree_notify::add_group_names(const std::string& value) {
  group_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.server_send_file_tree_notify.group_names)
}
inline void server_send_file_tree_notify::add_group_names(std::string&& value) {
  group_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.server_send_file_tree_notify.group_names)
}
inline void server_send_file_tree_notify::add_group_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  group_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.server_send_file_tree_notify.group_names)
}
inline void server_send_file_tree_notify::add_group_names(const void* value, size_t size) {
  group_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.server_send_file_tree_notify.group_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
server_send_file_tree_notify::group_names() const {
  // @@protoc_insertion_point(field_list:test_2.server_send_file_tree_notify.group_names)
  return group_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
server_send_file_tree_notify::mutable_group_names() {
  // @@protoc_insertion_point(field_mutable_list:test_2.server_send_file_tree_notify.group_names)
  return &group_names_;
}

// -------------------------------------------------------------------

// server_send_shell_config_notify

// repeated bytes shell_ops = 1;
inline int server_send_shell_config_notify::_internal_shell_ops_size() const {
  return shell_ops_.size();
}
inline int server_send_shell_config_notify::shell_ops_size() const {
  return _internal_shell_ops_size();
}
inline void server_send_shell_config_notify::clear_shell_ops() {
  shell_ops_.Clear();
}
inline std::string* server_send_shell_config_notify::add_shell_ops() {
  std::string* _s = _internal_add_shell_ops();
  // @@protoc_insertion_point(field_add_mutable:test_2.server_send_shell_config_notify.shell_ops)
  return _s;
}
inline const std::string& server_send_shell_config_notify::_internal_shell_ops(int index) const {
  return shell_ops_.Get(index);
}
inline const std::string& server_send_shell_config_notify::shell_ops(int index) const {
  // @@protoc_insertion_point(field_get:test_2.server_send_shell_config_notify.shell_ops)
  return _internal_shell_ops(index);
}
inline std::string* server_send_shell_config_notify::mutable_shell_ops(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.server_send_shell_config_notify.shell_ops)
  return shell_ops_.Mutable(index);
}
inline void server_send_shell_config_notify::set_shell_ops(int index, const std::string& value) {
  shell_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.server_send_shell_config_notify.shell_ops)
}
inline void server_send_shell_config_notify::set_shell_ops(int index, std::string&& value) {
  shell_ops_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.server_send_shell_config_notify.shell_ops)
}
inline void server_send_shell_config_notify::set_shell_ops(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shell_ops_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.server_send_shell_config_notify.shell_ops)
}
inline void server_send_shell_config_notify::set_shell_ops(int index, const void* value, size_t size) {
  shell_ops_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.server_send_shell_config_notify.shell_ops)
}
inline std::string* server_send_shell_config_notify::_internal_add_shell_ops() {
  return shell_ops_.Add();
}
inline void server_send_shell_config_notify::add_shell_ops(const std::string& value) {
  shell_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.server_send_shell_config_notify.shell_ops)
}
inline void server_send_shell_config_notify::add_shell_ops(std::string&& value) {
  shell_ops_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.server_send_shell_config_notify.shell_ops)
}
inline void server_send_shell_config_notify::add_shell_ops(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  shell_ops_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.server_send_shell_config_notify.shell_ops)
}
inline void server_send_shell_config_notify::add_shell_ops(const void* value, size_t size) {
  shell_ops_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.server_send_shell_config_notify.shell_ops)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
server_send_shell_config_notify::shell_ops() const {
  // @@protoc_insertion_point(field_list:test_2.server_send_shell_config_notify.shell_ops)
  return shell_ops_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
server_send_shell_config_notify::mutable_shell_ops() {
  // @@protoc_insertion_point(field_mutable_list:test_2.server_send_shell_config_notify.shell_ops)
  return &shell_ops_;
}

// -------------------------------------------------------------------

// client_lua_table_data_quest

// bytes file_name = 1;
inline void client_lua_table_data_quest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& client_lua_table_data_quest::file_name() const {
  // @@protoc_insertion_point(field_get:test_2.client_lua_table_data_quest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_lua_table_data_quest::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.client_lua_table_data_quest.file_name)
}
inline std::string* client_lua_table_data_quest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:test_2.client_lua_table_data_quest.file_name)
  return _s;
}
inline const std::string& client_lua_table_data_quest::_internal_file_name() const {
  return file_name_.Get();
}
inline void client_lua_table_data_quest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* client_lua_table_data_quest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* client_lua_table_data_quest::release_file_name() {
  // @@protoc_insertion_point(field_release:test_2.client_lua_table_data_quest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void client_lua_table_data_quest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.client_lua_table_data_quest.file_name)
}

// -------------------------------------------------------------------

// client_shell_option_quest

// bytes option = 1;
inline void client_shell_option_quest::clear_option() {
  option_.ClearToEmpty();
}
inline const std::string& client_shell_option_quest::option() const {
  // @@protoc_insertion_point(field_get:test_2.client_shell_option_quest.option)
  return _internal_option();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_shell_option_quest::set_option(ArgT0&& arg0, ArgT... args) {
 
 option_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.client_shell_option_quest.option)
}
inline std::string* client_shell_option_quest::mutable_option() {
  std::string* _s = _internal_mutable_option();
  // @@protoc_insertion_point(field_mutable:test_2.client_shell_option_quest.option)
  return _s;
}
inline const std::string& client_shell_option_quest::_internal_option() const {
  return option_.Get();
}
inline void client_shell_option_quest::_internal_set_option(const std::string& value) {
  
  option_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* client_shell_option_quest::_internal_mutable_option() {
  
  return option_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* client_shell_option_quest::release_option() {
  // @@protoc_insertion_point(field_release:test_2.client_shell_option_quest.option)
  return option_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void client_shell_option_quest::set_allocated_option(std::string* option) {
  if (option != nullptr) {
    
  } else {
    
  }
  option_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), option,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (option_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    option_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.client_shell_option_quest.option)
}

// -------------------------------------------------------------------

// server_send_current_time_notify

// int64 time_stamp = 1;
inline void server_send_current_time_notify::clear_time_stamp() {
  time_stamp_ = int64_t{0};
}
inline int64_t server_send_current_time_notify::_internal_time_stamp() const {
  return time_stamp_;
}
inline int64_t server_send_current_time_notify::time_stamp() const {
  // @@protoc_insertion_point(field_get:test_2.server_send_current_time_notify.time_stamp)
  return _internal_time_stamp();
}
inline void server_send_current_time_notify::_internal_set_time_stamp(int64_t value) {
  
  time_stamp_ = value;
}
inline void server_send_current_time_notify::set_time_stamp(int64_t value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:test_2.server_send_current_time_notify.time_stamp)
}

// bytes time_zone = 2;
inline void server_send_current_time_notify::clear_time_zone() {
  time_zone_.ClearToEmpty();
}
inline const std::string& server_send_current_time_notify::time_zone() const {
  // @@protoc_insertion_point(field_get:test_2.server_send_current_time_notify.time_zone)
  return _internal_time_zone();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void server_send_current_time_notify::set_time_zone(ArgT0&& arg0, ArgT... args) {
 
 time_zone_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.server_send_current_time_notify.time_zone)
}
inline std::string* server_send_current_time_notify::mutable_time_zone() {
  std::string* _s = _internal_mutable_time_zone();
  // @@protoc_insertion_point(field_mutable:test_2.server_send_current_time_notify.time_zone)
  return _s;
}
inline const std::string& server_send_current_time_notify::_internal_time_zone() const {
  return time_zone_.Get();
}
inline void server_send_current_time_notify::_internal_set_time_zone(const std::string& value) {
  
  time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* server_send_current_time_notify::_internal_mutable_time_zone() {
  
  return time_zone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* server_send_current_time_notify::release_time_zone() {
  // @@protoc_insertion_point(field_release:test_2.server_send_current_time_notify.time_zone)
  return time_zone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void server_send_current_time_notify::set_allocated_time_zone(std::string* time_zone) {
  if (time_zone != nullptr) {
    
  } else {
    
  }
  time_zone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_zone,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (time_zone_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    time_zone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.server_send_current_time_notify.time_zone)
}

// -------------------------------------------------------------------

// pair_value

// bytes key = 1;
inline void pair_value::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& pair_value::key() const {
  // @@protoc_insertion_point(field_get:test_2.pair_value.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pair_value::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.pair_value.key)
}
inline std::string* pair_value::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:test_2.pair_value.key)
  return _s;
}
inline const std::string& pair_value::_internal_key() const {
  return key_.Get();
}
inline void pair_value::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pair_value::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pair_value::release_key() {
  // @@protoc_insertion_point(field_release:test_2.pair_value.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pair_value::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.pair_value.key)
}

// bytes value = 2;
inline void pair_value::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& pair_value::value() const {
  // @@protoc_insertion_point(field_get:test_2.pair_value.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void pair_value::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.pair_value.value)
}
inline std::string* pair_value::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:test_2.pair_value.value)
  return _s;
}
inline const std::string& pair_value::_internal_value() const {
  return value_.Get();
}
inline void pair_value::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* pair_value::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* pair_value::release_value() {
  // @@protoc_insertion_point(field_release:test_2.pair_value.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void pair_value::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.pair_value.value)
}

// -------------------------------------------------------------------

// field_type_pair

// bytes key = 1;
inline void field_type_pair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& field_type_pair::key() const {
  // @@protoc_insertion_point(field_get:test_2.field_type_pair.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_type_pair::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_type_pair.key)
}
inline std::string* field_type_pair::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:test_2.field_type_pair.key)
  return _s;
}
inline const std::string& field_type_pair::_internal_key() const {
  return key_.Get();
}
inline void field_type_pair::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_type_pair::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_type_pair::release_key() {
  // @@protoc_insertion_point(field_release:test_2.field_type_pair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_type_pair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_type_pair.key)
}

// int32 lua_type = 2;
inline void field_type_pair::clear_lua_type() {
  lua_type_ = 0;
}
inline int32_t field_type_pair::_internal_lua_type() const {
  return lua_type_;
}
inline int32_t field_type_pair::lua_type() const {
  // @@protoc_insertion_point(field_get:test_2.field_type_pair.lua_type)
  return _internal_lua_type();
}
inline void field_type_pair::_internal_set_lua_type(int32_t value) {
  
  lua_type_ = value;
}
inline void field_type_pair::set_lua_type(int32_t value) {
  _internal_set_lua_type(value);
  // @@protoc_insertion_point(field_set:test_2.field_type_pair.lua_type)
}

// -------------------------------------------------------------------

// row_data

// bytes key = 1;
inline void row_data::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& row_data::key() const {
  // @@protoc_insertion_point(field_get:test_2.row_data.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void row_data::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.row_data.key)
}
inline std::string* row_data::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:test_2.row_data.key)
  return _s;
}
inline const std::string& row_data::_internal_key() const {
  return key_.Get();
}
inline void row_data::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* row_data::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* row_data::release_key() {
  // @@protoc_insertion_point(field_release:test_2.row_data.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void row_data::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.row_data.key)
}

// repeated .test_2.pair_value pair = 2;
inline int row_data::_internal_pair_size() const {
  return pair_.size();
}
inline int row_data::pair_size() const {
  return _internal_pair_size();
}
inline void row_data::clear_pair() {
  pair_.Clear();
}
inline ::test_2::pair_value* row_data::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.row_data.pair)
  return pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::pair_value >*
row_data::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:test_2.row_data.pair)
  return &pair_;
}
inline const ::test_2::pair_value& row_data::_internal_pair(int index) const {
  return pair_.Get(index);
}
inline const ::test_2::pair_value& row_data::pair(int index) const {
  // @@protoc_insertion_point(field_get:test_2.row_data.pair)
  return _internal_pair(index);
}
inline ::test_2::pair_value* row_data::_internal_add_pair() {
  return pair_.Add();
}
inline ::test_2::pair_value* row_data::add_pair() {
  ::test_2::pair_value* _add = _internal_add_pair();
  // @@protoc_insertion_point(field_add:test_2.row_data.pair)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::pair_value >&
row_data::pair() const {
  // @@protoc_insertion_point(field_list:test_2.row_data.pair)
  return pair_;
}

// -------------------------------------------------------------------

// field_info

// bytes field_name = 1;
inline void field_info::clear_field_name() {
  field_name_.ClearToEmpty();
}
inline const std::string& field_info::field_name() const {
  // @@protoc_insertion_point(field_get:test_2.field_info.field_name)
  return _internal_field_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_info::set_field_name(ArgT0&& arg0, ArgT... args) {
 
 field_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_info.field_name)
}
inline std::string* field_info::mutable_field_name() {
  std::string* _s = _internal_mutable_field_name();
  // @@protoc_insertion_point(field_mutable:test_2.field_info.field_name)
  return _s;
}
inline const std::string& field_info::_internal_field_name() const {
  return field_name_.Get();
}
inline void field_info::_internal_set_field_name(const std::string& value) {
  
  field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_info::_internal_mutable_field_name() {
  
  return field_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_info::release_field_name() {
  // @@protoc_insertion_point(field_release:test_2.field_info.field_name)
  return field_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_info::set_allocated_field_name(std::string* field_name) {
  if (field_name != nullptr) {
    
  } else {
    
  }
  field_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_info.field_name)
}

// bytes field_desc = 2;
inline void field_info::clear_field_desc() {
  field_desc_.ClearToEmpty();
}
inline const std::string& field_info::field_desc() const {
  // @@protoc_insertion_point(field_get:test_2.field_info.field_desc)
  return _internal_field_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_info::set_field_desc(ArgT0&& arg0, ArgT... args) {
 
 field_desc_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_info.field_desc)
}
inline std::string* field_info::mutable_field_desc() {
  std::string* _s = _internal_mutable_field_desc();
  // @@protoc_insertion_point(field_mutable:test_2.field_info.field_desc)
  return _s;
}
inline const std::string& field_info::_internal_field_desc() const {
  return field_desc_.Get();
}
inline void field_info::_internal_set_field_desc(const std::string& value) {
  
  field_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_info::_internal_mutable_field_desc() {
  
  return field_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_info::release_field_desc() {
  // @@protoc_insertion_point(field_release:test_2.field_info.field_desc)
  return field_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_info::set_allocated_field_desc(std::string* field_desc) {
  if (field_desc != nullptr) {
    
  } else {
    
  }
  field_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    field_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_info.field_desc)
}

// bytes field_link = 3;
inline void field_info::clear_field_link() {
  field_link_.ClearToEmpty();
}
inline const std::string& field_info::field_link() const {
  // @@protoc_insertion_point(field_get:test_2.field_info.field_link)
  return _internal_field_link();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_info::set_field_link(ArgT0&& arg0, ArgT... args) {
 
 field_link_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_info.field_link)
}
inline std::string* field_info::mutable_field_link() {
  std::string* _s = _internal_mutable_field_link();
  // @@protoc_insertion_point(field_mutable:test_2.field_info.field_link)
  return _s;
}
inline const std::string& field_info::_internal_field_link() const {
  return field_link_.Get();
}
inline void field_info::_internal_set_field_link(const std::string& value) {
  
  field_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_info::_internal_mutable_field_link() {
  
  return field_link_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_info::release_field_link() {
  // @@protoc_insertion_point(field_release:test_2.field_info.field_link)
  return field_link_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_info::set_allocated_field_link(std::string* field_link) {
  if (field_link != nullptr) {
    
  } else {
    
  }
  field_link_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_link,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (field_link_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    field_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_info.field_link)
}

// -------------------------------------------------------------------

// field_squence

// string index = 1;
inline void field_squence::clear_index() {
  index_.ClearToEmpty();
}
inline const std::string& field_squence::index() const {
  // @@protoc_insertion_point(field_get:test_2.field_squence.index)
  return _internal_index();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_squence::set_index(ArgT0&& arg0, ArgT... args) {
 
 index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_squence.index)
}
inline std::string* field_squence::mutable_index() {
  std::string* _s = _internal_mutable_index();
  // @@protoc_insertion_point(field_mutable:test_2.field_squence.index)
  return _s;
}
inline const std::string& field_squence::_internal_index() const {
  return index_.Get();
}
inline void field_squence::_internal_set_index(const std::string& value) {
  
  index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_squence::_internal_mutable_index() {
  
  return index_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_squence::release_index() {
  // @@protoc_insertion_point(field_release:test_2.field_squence.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_squence::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (index_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_squence.index)
}

// repeated .test_2.field_info infos = 2;
inline int field_squence::_internal_infos_size() const {
  return infos_.size();
}
inline int field_squence::infos_size() const {
  return _internal_infos_size();
}
inline void field_squence::clear_infos() {
  infos_.Clear();
}
inline ::test_2::field_info* field_squence::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.field_squence.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_info >*
field_squence::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:test_2.field_squence.infos)
  return &infos_;
}
inline const ::test_2::field_info& field_squence::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::test_2::field_info& field_squence::infos(int index) const {
  // @@protoc_insertion_point(field_get:test_2.field_squence.infos)
  return _internal_infos(index);
}
inline ::test_2::field_info* field_squence::_internal_add_infos() {
  return infos_.Add();
}
inline ::test_2::field_info* field_squence::add_infos() {
  ::test_2::field_info* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:test_2.field_squence.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_info >&
field_squence::infos() const {
  // @@protoc_insertion_point(field_list:test_2.field_squence.infos)
  return infos_;
}

// -------------------------------------------------------------------

// table_data

// bytes table_name = 1;
inline void table_data::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& table_data::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.table_data.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void table_data::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.table_data.table_name)
}
inline std::string* table_data::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.table_data.table_name)
  return _s;
}
inline const std::string& table_data::_internal_table_name() const {
  return table_name_.Get();
}
inline void table_data::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* table_data::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* table_data::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.table_data.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void table_data::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.table_data.table_name)
}

// int32 row_count = 2;
inline void table_data::clear_row_count() {
  row_count_ = 0;
}
inline int32_t table_data::_internal_row_count() const {
  return row_count_;
}
inline int32_t table_data::row_count() const {
  // @@protoc_insertion_point(field_get:test_2.table_data.row_count)
  return _internal_row_count();
}
inline void table_data::_internal_set_row_count(int32_t value) {
  
  row_count_ = value;
}
inline void table_data::set_row_count(int32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:test_2.table_data.row_count)
}

// int32 column_count = 3;
inline void table_data::clear_column_count() {
  column_count_ = 0;
}
inline int32_t table_data::_internal_column_count() const {
  return column_count_;
}
inline int32_t table_data::column_count() const {
  // @@protoc_insertion_point(field_get:test_2.table_data.column_count)
  return _internal_column_count();
}
inline void table_data::_internal_set_column_count(int32_t value) {
  
  column_count_ = value;
}
inline void table_data::set_column_count(int32_t value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:test_2.table_data.column_count)
}

// repeated bytes filed_names = 4;
inline int table_data::_internal_filed_names_size() const {
  return filed_names_.size();
}
inline int table_data::filed_names_size() const {
  return _internal_filed_names_size();
}
inline void table_data::clear_filed_names() {
  filed_names_.Clear();
}
inline std::string* table_data::add_filed_names() {
  std::string* _s = _internal_add_filed_names();
  // @@protoc_insertion_point(field_add_mutable:test_2.table_data.filed_names)
  return _s;
}
inline const std::string& table_data::_internal_filed_names(int index) const {
  return filed_names_.Get(index);
}
inline const std::string& table_data::filed_names(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_data.filed_names)
  return _internal_filed_names(index);
}
inline std::string* table_data::mutable_filed_names(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_data.filed_names)
  return filed_names_.Mutable(index);
}
inline void table_data::set_filed_names(int index, const std::string& value) {
  filed_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.table_data.filed_names)
}
inline void table_data::set_filed_names(int index, std::string&& value) {
  filed_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.table_data.filed_names)
}
inline void table_data::set_filed_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filed_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.table_data.filed_names)
}
inline void table_data::set_filed_names(int index, const void* value, size_t size) {
  filed_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.table_data.filed_names)
}
inline std::string* table_data::_internal_add_filed_names() {
  return filed_names_.Add();
}
inline void table_data::add_filed_names(const std::string& value) {
  filed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.table_data.filed_names)
}
inline void table_data::add_filed_names(std::string&& value) {
  filed_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.table_data.filed_names)
}
inline void table_data::add_filed_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.table_data.filed_names)
}
inline void table_data::add_filed_names(const void* value, size_t size) {
  filed_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.table_data.filed_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
table_data::filed_names() const {
  // @@protoc_insertion_point(field_list:test_2.table_data.filed_names)
  return filed_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
table_data::mutable_filed_names() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_data.filed_names)
  return &filed_names_;
}

// repeated .test_2.field_type_pair filed_types = 5;
inline int table_data::_internal_filed_types_size() const {
  return filed_types_.size();
}
inline int table_data::filed_types_size() const {
  return _internal_filed_types_size();
}
inline void table_data::clear_filed_types() {
  filed_types_.Clear();
}
inline ::test_2::field_type_pair* table_data::mutable_filed_types(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_data.filed_types)
  return filed_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_pair >*
table_data::mutable_filed_types() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_data.filed_types)
  return &filed_types_;
}
inline const ::test_2::field_type_pair& table_data::_internal_filed_types(int index) const {
  return filed_types_.Get(index);
}
inline const ::test_2::field_type_pair& table_data::filed_types(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_data.filed_types)
  return _internal_filed_types(index);
}
inline ::test_2::field_type_pair* table_data::_internal_add_filed_types() {
  return filed_types_.Add();
}
inline ::test_2::field_type_pair* table_data::add_filed_types() {
  ::test_2::field_type_pair* _add = _internal_add_filed_types();
  // @@protoc_insertion_point(field_add:test_2.table_data.filed_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_pair >&
table_data::filed_types() const {
  // @@protoc_insertion_point(field_list:test_2.table_data.filed_types)
  return filed_types_;
}

// repeated .test_2.row_data row_lists = 6;
inline int table_data::_internal_row_lists_size() const {
  return row_lists_.size();
}
inline int table_data::row_lists_size() const {
  return _internal_row_lists_size();
}
inline void table_data::clear_row_lists() {
  row_lists_.Clear();
}
inline ::test_2::row_data* table_data::mutable_row_lists(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_data.row_lists)
  return row_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >*
table_data::mutable_row_lists() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_data.row_lists)
  return &row_lists_;
}
inline const ::test_2::row_data& table_data::_internal_row_lists(int index) const {
  return row_lists_.Get(index);
}
inline const ::test_2::row_data& table_data::row_lists(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_data.row_lists)
  return _internal_row_lists(index);
}
inline ::test_2::row_data* table_data::_internal_add_row_lists() {
  return row_lists_.Add();
}
inline ::test_2::row_data* table_data::add_row_lists() {
  ::test_2::row_data* _add = _internal_add_row_lists();
  // @@protoc_insertion_point(field_add:test_2.table_data.row_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >&
table_data::row_lists() const {
  // @@protoc_insertion_point(field_list:test_2.table_data.row_lists)
  return row_lists_;
}

// repeated .test_2.field_squence filed_sequences = 7;
inline int table_data::_internal_filed_sequences_size() const {
  return filed_sequences_.size();
}
inline int table_data::filed_sequences_size() const {
  return _internal_filed_sequences_size();
}
inline void table_data::clear_filed_sequences() {
  filed_sequences_.Clear();
}
inline ::test_2::field_squence* table_data::mutable_filed_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_data.filed_sequences)
  return filed_sequences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
table_data::mutable_filed_sequences() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_data.filed_sequences)
  return &filed_sequences_;
}
inline const ::test_2::field_squence& table_data::_internal_filed_sequences(int index) const {
  return filed_sequences_.Get(index);
}
inline const ::test_2::field_squence& table_data::filed_sequences(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_data.filed_sequences)
  return _internal_filed_sequences(index);
}
inline ::test_2::field_squence* table_data::_internal_add_filed_sequences() {
  return filed_sequences_.Add();
}
inline ::test_2::field_squence* table_data::add_filed_sequences() {
  ::test_2::field_squence* _add = _internal_add_filed_sequences();
  // @@protoc_insertion_point(field_add:test_2.table_data.filed_sequences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
table_data::filed_sequences() const {
  // @@protoc_insertion_point(field_list:test_2.table_data.filed_sequences)
  return filed_sequences_;
}

// -------------------------------------------------------------------

// table_info

// bytes table_name = 1;
inline void table_info::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& table_info::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.table_info.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void table_info::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.table_info.table_name)
}
inline std::string* table_info::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.table_info.table_name)
  return _s;
}
inline const std::string& table_info::_internal_table_name() const {
  return table_name_.Get();
}
inline void table_info::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* table_info::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* table_info::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.table_info.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void table_info::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.table_info.table_name)
}

// repeated .test_2.field_squence filed_sequences = 2;
inline int table_info::_internal_filed_sequences_size() const {
  return filed_sequences_.size();
}
inline int table_info::filed_sequences_size() const {
  return _internal_filed_sequences_size();
}
inline void table_info::clear_filed_sequences() {
  filed_sequences_.Clear();
}
inline ::test_2::field_squence* table_info::mutable_filed_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_info.filed_sequences)
  return filed_sequences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
table_info::mutable_filed_sequences() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_info.filed_sequences)
  return &filed_sequences_;
}
inline const ::test_2::field_squence& table_info::_internal_filed_sequences(int index) const {
  return filed_sequences_.Get(index);
}
inline const ::test_2::field_squence& table_info::filed_sequences(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_info.filed_sequences)
  return _internal_filed_sequences(index);
}
inline ::test_2::field_squence* table_info::_internal_add_filed_sequences() {
  return filed_sequences_.Add();
}
inline ::test_2::field_squence* table_info::add_filed_sequences() {
  ::test_2::field_squence* _add = _internal_add_filed_sequences();
  // @@protoc_insertion_point(field_add:test_2.table_info.filed_sequences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
table_info::filed_sequences() const {
  // @@protoc_insertion_point(field_list:test_2.table_info.filed_sequences)
  return filed_sequences_;
}

// -------------------------------------------------------------------

// client_save_table_data_request

// bytes table_name = 1;
inline void client_save_table_data_request::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& client_save_table_data_request::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.client_save_table_data_request.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_save_table_data_request::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.client_save_table_data_request.table_name)
}
inline std::string* client_save_table_data_request::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.client_save_table_data_request.table_name)
  return _s;
}
inline const std::string& client_save_table_data_request::_internal_table_name() const {
  return table_name_.Get();
}
inline void client_save_table_data_request::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* client_save_table_data_request::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* client_save_table_data_request::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.client_save_table_data_request.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void client_save_table_data_request::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.client_save_table_data_request.table_name)
}

// repeated .test_2.row_data row_lists = 2;
inline int client_save_table_data_request::_internal_row_lists_size() const {
  return row_lists_.size();
}
inline int client_save_table_data_request::row_lists_size() const {
  return _internal_row_lists_size();
}
inline void client_save_table_data_request::clear_row_lists() {
  row_lists_.Clear();
}
inline ::test_2::row_data* client_save_table_data_request::mutable_row_lists(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.client_save_table_data_request.row_lists)
  return row_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >*
client_save_table_data_request::mutable_row_lists() {
  // @@protoc_insertion_point(field_mutable_list:test_2.client_save_table_data_request.row_lists)
  return &row_lists_;
}
inline const ::test_2::row_data& client_save_table_data_request::_internal_row_lists(int index) const {
  return row_lists_.Get(index);
}
inline const ::test_2::row_data& client_save_table_data_request::row_lists(int index) const {
  // @@protoc_insertion_point(field_get:test_2.client_save_table_data_request.row_lists)
  return _internal_row_lists(index);
}
inline ::test_2::row_data* client_save_table_data_request::_internal_add_row_lists() {
  return row_lists_.Add();
}
inline ::test_2::row_data* client_save_table_data_request::add_row_lists() {
  ::test_2::row_data* _add = _internal_add_row_lists();
  // @@protoc_insertion_point(field_add:test_2.client_save_table_data_request.row_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >&
client_save_table_data_request::row_lists() const {
  // @@protoc_insertion_point(field_list:test_2.client_save_table_data_request.row_lists)
  return row_lists_;
}

// -------------------------------------------------------------------

// send_shell_option_print_notify

// bytes line = 1;
inline void send_shell_option_print_notify::clear_line() {
  line_.ClearToEmpty();
}
inline const std::string& send_shell_option_print_notify::line() const {
  // @@protoc_insertion_point(field_get:test_2.send_shell_option_print_notify.line)
  return _internal_line();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void send_shell_option_print_notify::set_line(ArgT0&& arg0, ArgT... args) {
 
 line_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.send_shell_option_print_notify.line)
}
inline std::string* send_shell_option_print_notify::mutable_line() {
  std::string* _s = _internal_mutable_line();
  // @@protoc_insertion_point(field_mutable:test_2.send_shell_option_print_notify.line)
  return _s;
}
inline const std::string& send_shell_option_print_notify::_internal_line() const {
  return line_.Get();
}
inline void send_shell_option_print_notify::_internal_set_line(const std::string& value) {
  
  line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* send_shell_option_print_notify::_internal_mutable_line() {
  
  return line_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* send_shell_option_print_notify::release_line() {
  // @@protoc_insertion_point(field_release:test_2.send_shell_option_print_notify.line)
  return line_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void send_shell_option_print_notify::set_allocated_line(std::string* line) {
  if (line != nullptr) {
    
  } else {
    
  }
  line_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), line,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (line_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.send_shell_option_print_notify.line)
}

// int32 flag = 2;
inline void send_shell_option_print_notify::clear_flag() {
  flag_ = 0;
}
inline int32_t send_shell_option_print_notify::_internal_flag() const {
  return flag_;
}
inline int32_t send_shell_option_print_notify::flag() const {
  // @@protoc_insertion_point(field_get:test_2.send_shell_option_print_notify.flag)
  return _internal_flag();
}
inline void send_shell_option_print_notify::_internal_set_flag(int32_t value) {
  
  flag_ = value;
}
inline void send_shell_option_print_notify::set_flag(int32_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:test_2.send_shell_option_print_notify.flag)
}

// -------------------------------------------------------------------

// client_save_table_info_request

// bytes table_name = 1;
inline void client_save_table_info_request::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& client_save_table_info_request::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.client_save_table_info_request.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_save_table_info_request::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.client_save_table_info_request.table_name)
}
inline std::string* client_save_table_info_request::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.client_save_table_info_request.table_name)
  return _s;
}
inline const std::string& client_save_table_info_request::_internal_table_name() const {
  return table_name_.Get();
}
inline void client_save_table_info_request::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* client_save_table_info_request::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* client_save_table_info_request::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.client_save_table_info_request.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void client_save_table_info_request::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.client_save_table_info_request.table_name)
}

// repeated .test_2.field_squence field_squences = 2;
inline int client_save_table_info_request::_internal_field_squences_size() const {
  return field_squences_.size();
}
inline int client_save_table_info_request::field_squences_size() const {
  return _internal_field_squences_size();
}
inline void client_save_table_info_request::clear_field_squences() {
  field_squences_.Clear();
}
inline ::test_2::field_squence* client_save_table_info_request::mutable_field_squences(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.client_save_table_info_request.field_squences)
  return field_squences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
client_save_table_info_request::mutable_field_squences() {
  // @@protoc_insertion_point(field_mutable_list:test_2.client_save_table_info_request.field_squences)
  return &field_squences_;
}
inline const ::test_2::field_squence& client_save_table_info_request::_internal_field_squences(int index) const {
  return field_squences_.Get(index);
}
inline const ::test_2::field_squence& client_save_table_info_request::field_squences(int index) const {
  // @@protoc_insertion_point(field_get:test_2.client_save_table_info_request.field_squences)
  return _internal_field_squences(index);
}
inline ::test_2::field_squence* client_save_table_info_request::_internal_add_field_squences() {
  return field_squences_.Add();
}
inline ::test_2::field_squence* client_save_table_info_request::add_field_squences() {
  ::test_2::field_squence* _add = _internal_add_field_squences();
  // @@protoc_insertion_point(field_add:test_2.client_save_table_info_request.field_squences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
client_save_table_info_request::field_squences() const {
  // @@protoc_insertion_point(field_list:test_2.client_save_table_info_request.field_squences)
  return field_squences_;
}

// -------------------------------------------------------------------

// send_server_current_time_nofity

// int64 time = 1;
inline void send_server_current_time_nofity::clear_time() {
  time_ = int64_t{0};
}
inline int64_t send_server_current_time_nofity::_internal_time() const {
  return time_;
}
inline int64_t send_server_current_time_nofity::time() const {
  // @@protoc_insertion_point(field_get:test_2.send_server_current_time_nofity.time)
  return _internal_time();
}
inline void send_server_current_time_nofity::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void send_server_current_time_nofity::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:test_2.send_server_current_time_nofity.time)
}

// -------------------------------------------------------------------

// client_modify_server_time_quest

// int64 time = 1;
inline void client_modify_server_time_quest::clear_time() {
  time_ = int64_t{0};
}
inline int64_t client_modify_server_time_quest::_internal_time() const {
  return time_;
}
inline int64_t client_modify_server_time_quest::time() const {
  // @@protoc_insertion_point(field_get:test_2.client_modify_server_time_quest.time)
  return _internal_time();
}
inline void client_modify_server_time_quest::_internal_set_time(int64_t value) {
  
  time_ = value;
}
inline void client_modify_server_time_quest::set_time(int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:test_2.client_modify_server_time_quest.time)
}

// -------------------------------------------------------------------

// client_lua_list_data_quest

// bytes file_name = 1;
inline void client_lua_list_data_quest::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& client_lua_list_data_quest::file_name() const {
  // @@protoc_insertion_point(field_get:test_2.client_lua_list_data_quest.file_name)
  return _internal_file_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void client_lua_list_data_quest::set_file_name(ArgT0&& arg0, ArgT... args) {
 
 file_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.client_lua_list_data_quest.file_name)
}
inline std::string* client_lua_list_data_quest::mutable_file_name() {
  std::string* _s = _internal_mutable_file_name();
  // @@protoc_insertion_point(field_mutable:test_2.client_lua_list_data_quest.file_name)
  return _s;
}
inline const std::string& client_lua_list_data_quest::_internal_file_name() const {
  return file_name_.Get();
}
inline void client_lua_list_data_quest::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* client_lua_list_data_quest::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* client_lua_list_data_quest::release_file_name() {
  // @@protoc_insertion_point(field_release:test_2.client_lua_list_data_quest.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void client_lua_list_data_quest::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.client_lua_list_data_quest.file_name)
}

// -------------------------------------------------------------------

// field_type_key_value

// bytes key = 1;
inline void field_type_key_value::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& field_type_key_value::key() const {
  // @@protoc_insertion_point(field_get:test_2.field_type_key_value.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_type_key_value::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_type_key_value.key)
}
inline std::string* field_type_key_value::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:test_2.field_type_key_value.key)
  return _s;
}
inline const std::string& field_type_key_value::_internal_key() const {
  return key_.Get();
}
inline void field_type_key_value::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_type_key_value::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_type_key_value::release_key() {
  // @@protoc_insertion_point(field_release:test_2.field_type_key_value.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_type_key_value::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_type_key_value.key)
}

// bytes value = 2;
inline void field_type_key_value::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& field_type_key_value::value() const {
  // @@protoc_insertion_point(field_get:test_2.field_type_key_value.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void field_type_key_value::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.field_type_key_value.value)
}
inline std::string* field_type_key_value::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:test_2.field_type_key_value.value)
  return _s;
}
inline const std::string& field_type_key_value::_internal_value() const {
  return value_.Get();
}
inline void field_type_key_value::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* field_type_key_value::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* field_type_key_value::release_value() {
  // @@protoc_insertion_point(field_release:test_2.field_type_key_value.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void field_type_key_value::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.field_type_key_value.value)
}

// int32 type = 3;
inline void field_type_key_value::clear_type() {
  type_ = 0;
}
inline int32_t field_type_key_value::_internal_type() const {
  return type_;
}
inline int32_t field_type_key_value::type() const {
  // @@protoc_insertion_point(field_get:test_2.field_type_key_value.type)
  return _internal_type();
}
inline void field_type_key_value::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void field_type_key_value::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:test_2.field_type_key_value.type)
}

// -------------------------------------------------------------------

// send_lua_list_data_notify

// bytes table_name = 1;
inline void send_lua_list_data_notify::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& send_lua_list_data_notify::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.send_lua_list_data_notify.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void send_lua_list_data_notify::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.send_lua_list_data_notify.table_name)
}
inline std::string* send_lua_list_data_notify::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.send_lua_list_data_notify.table_name)
  return _s;
}
inline const std::string& send_lua_list_data_notify::_internal_table_name() const {
  return table_name_.Get();
}
inline void send_lua_list_data_notify::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* send_lua_list_data_notify::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* send_lua_list_data_notify::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.send_lua_list_data_notify.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void send_lua_list_data_notify::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.send_lua_list_data_notify.table_name)
}

// repeated .test_2.field_type_key_value filed_types = 2;
inline int send_lua_list_data_notify::_internal_filed_types_size() const {
  return filed_types_.size();
}
inline int send_lua_list_data_notify::filed_types_size() const {
  return _internal_filed_types_size();
}
inline void send_lua_list_data_notify::clear_filed_types() {
  filed_types_.Clear();
}
inline ::test_2::field_type_key_value* send_lua_list_data_notify::mutable_filed_types(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.send_lua_list_data_notify.filed_types)
  return filed_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >*
send_lua_list_data_notify::mutable_filed_types() {
  // @@protoc_insertion_point(field_mutable_list:test_2.send_lua_list_data_notify.filed_types)
  return &filed_types_;
}
inline const ::test_2::field_type_key_value& send_lua_list_data_notify::_internal_filed_types(int index) const {
  return filed_types_.Get(index);
}
inline const ::test_2::field_type_key_value& send_lua_list_data_notify::filed_types(int index) const {
  // @@protoc_insertion_point(field_get:test_2.send_lua_list_data_notify.filed_types)
  return _internal_filed_types(index);
}
inline ::test_2::field_type_key_value* send_lua_list_data_notify::_internal_add_filed_types() {
  return filed_types_.Add();
}
inline ::test_2::field_type_key_value* send_lua_list_data_notify::add_filed_types() {
  ::test_2::field_type_key_value* _add = _internal_add_filed_types();
  // @@protoc_insertion_point(field_add:test_2.send_lua_list_data_notify.filed_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >&
send_lua_list_data_notify::filed_types() const {
  // @@protoc_insertion_point(field_list:test_2.send_lua_list_data_notify.filed_types)
  return filed_types_;
}

// -------------------------------------------------------------------

// save_lua_list_data_request

// bytes table_name = 1;
inline void save_lua_list_data_request::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& save_lua_list_data_request::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.save_lua_list_data_request.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void save_lua_list_data_request::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.save_lua_list_data_request.table_name)
}
inline std::string* save_lua_list_data_request::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.save_lua_list_data_request.table_name)
  return _s;
}
inline const std::string& save_lua_list_data_request::_internal_table_name() const {
  return table_name_.Get();
}
inline void save_lua_list_data_request::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* save_lua_list_data_request::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* save_lua_list_data_request::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.save_lua_list_data_request.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void save_lua_list_data_request::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.save_lua_list_data_request.table_name)
}

// repeated .test_2.field_type_key_value filed_types = 2;
inline int save_lua_list_data_request::_internal_filed_types_size() const {
  return filed_types_.size();
}
inline int save_lua_list_data_request::filed_types_size() const {
  return _internal_filed_types_size();
}
inline void save_lua_list_data_request::clear_filed_types() {
  filed_types_.Clear();
}
inline ::test_2::field_type_key_value* save_lua_list_data_request::mutable_filed_types(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.save_lua_list_data_request.filed_types)
  return filed_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >*
save_lua_list_data_request::mutable_filed_types() {
  // @@protoc_insertion_point(field_mutable_list:test_2.save_lua_list_data_request.filed_types)
  return &filed_types_;
}
inline const ::test_2::field_type_key_value& save_lua_list_data_request::_internal_filed_types(int index) const {
  return filed_types_.Get(index);
}
inline const ::test_2::field_type_key_value& save_lua_list_data_request::filed_types(int index) const {
  // @@protoc_insertion_point(field_get:test_2.save_lua_list_data_request.filed_types)
  return _internal_filed_types(index);
}
inline ::test_2::field_type_key_value* save_lua_list_data_request::_internal_add_filed_types() {
  return filed_types_.Add();
}
inline ::test_2::field_type_key_value* save_lua_list_data_request::add_filed_types() {
  ::test_2::field_type_key_value* _add = _internal_add_filed_types();
  // @@protoc_insertion_point(field_add:test_2.save_lua_list_data_request.filed_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_type_key_value >&
save_lua_list_data_request::filed_types() const {
  // @@protoc_insertion_point(field_list:test_2.save_lua_list_data_request.filed_types)
  return filed_types_;
}

// -------------------------------------------------------------------

// client_field_link_info_quest

// -------------------------------------------------------------------

// table_field_list

// bytes table_name = 1;
inline void table_field_list::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& table_field_list::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.table_field_list.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void table_field_list::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.table_field_list.table_name)
}
inline std::string* table_field_list::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.table_field_list.table_name)
  return _s;
}
inline const std::string& table_field_list::_internal_table_name() const {
  return table_name_.Get();
}
inline void table_field_list::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* table_field_list::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* table_field_list::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.table_field_list.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void table_field_list::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.table_field_list.table_name)
}

// repeated bytes fields = 2;
inline int table_field_list::_internal_fields_size() const {
  return fields_.size();
}
inline int table_field_list::fields_size() const {
  return _internal_fields_size();
}
inline void table_field_list::clear_fields() {
  fields_.Clear();
}
inline std::string* table_field_list::add_fields() {
  std::string* _s = _internal_add_fields();
  // @@protoc_insertion_point(field_add_mutable:test_2.table_field_list.fields)
  return _s;
}
inline const std::string& table_field_list::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const std::string& table_field_list::fields(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_field_list.fields)
  return _internal_fields(index);
}
inline std::string* table_field_list::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_field_list.fields)
  return fields_.Mutable(index);
}
inline void table_field_list::set_fields(int index, const std::string& value) {
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.table_field_list.fields)
}
inline void table_field_list::set_fields(int index, std::string&& value) {
  fields_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.table_field_list.fields)
}
inline void table_field_list::set_fields(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.table_field_list.fields)
}
inline void table_field_list::set_fields(int index, const void* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.table_field_list.fields)
}
inline std::string* table_field_list::_internal_add_fields() {
  return fields_.Add();
}
inline void table_field_list::add_fields(const std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.table_field_list.fields)
}
inline void table_field_list::add_fields(std::string&& value) {
  fields_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.table_field_list.fields)
}
inline void table_field_list::add_fields(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.table_field_list.fields)
}
inline void table_field_list::add_fields(const void* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.table_field_list.fields)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
table_field_list::fields() const {
  // @@protoc_insertion_point(field_list:test_2.table_field_list.fields)
  return fields_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
table_field_list::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_field_list.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// send_field_link_info

// repeated .test_2.table_field_list table = 1;
inline int send_field_link_info::_internal_table_size() const {
  return table_.size();
}
inline int send_field_link_info::table_size() const {
  return _internal_table_size();
}
inline void send_field_link_info::clear_table() {
  table_.Clear();
}
inline ::test_2::table_field_list* send_field_link_info::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.send_field_link_info.table)
  return table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >*
send_field_link_info::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:test_2.send_field_link_info.table)
  return &table_;
}
inline const ::test_2::table_field_list& send_field_link_info::_internal_table(int index) const {
  return table_.Get(index);
}
inline const ::test_2::table_field_list& send_field_link_info::table(int index) const {
  // @@protoc_insertion_point(field_get:test_2.send_field_link_info.table)
  return _internal_table(index);
}
inline ::test_2::table_field_list* send_field_link_info::_internal_add_table() {
  return table_.Add();
}
inline ::test_2::table_field_list* send_field_link_info::add_table() {
  ::test_2::table_field_list* _add = _internal_add_table();
  // @@protoc_insertion_point(field_add:test_2.send_field_link_info.table)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >&
send_field_link_info::table() const {
  // @@protoc_insertion_point(field_list:test_2.send_field_link_info.table)
  return table_;
}

// repeated .test_2.table_field_list list = 2;
inline int send_field_link_info::_internal_list_size() const {
  return list_.size();
}
inline int send_field_link_info::list_size() const {
  return _internal_list_size();
}
inline void send_field_link_info::clear_list() {
  list_.Clear();
}
inline ::test_2::table_field_list* send_field_link_info::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.send_field_link_info.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >*
send_field_link_info::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:test_2.send_field_link_info.list)
  return &list_;
}
inline const ::test_2::table_field_list& send_field_link_info::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::test_2::table_field_list& send_field_link_info::list(int index) const {
  // @@protoc_insertion_point(field_get:test_2.send_field_link_info.list)
  return _internal_list(index);
}
inline ::test_2::table_field_list* send_field_link_info::_internal_add_list() {
  return list_.Add();
}
inline ::test_2::table_field_list* send_field_link_info::add_list() {
  ::test_2::table_field_list* _add = _internal_add_list();
  // @@protoc_insertion_point(field_add:test_2.send_field_link_info.list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::table_field_list >&
send_field_link_info::list() const {
  // @@protoc_insertion_point(field_list:test_2.send_field_link_info.list)
  return list_;
}

// -------------------------------------------------------------------

// process_statue_info

// bytes process_name = 2;
inline void process_statue_info::clear_process_name() {
  process_name_.ClearToEmpty();
}
inline const std::string& process_statue_info::process_name() const {
  // @@protoc_insertion_point(field_get:test_2.process_statue_info.process_name)
  return _internal_process_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void process_statue_info::set_process_name(ArgT0&& arg0, ArgT... args) {
 
 process_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.process_statue_info.process_name)
}
inline std::string* process_statue_info::mutable_process_name() {
  std::string* _s = _internal_mutable_process_name();
  // @@protoc_insertion_point(field_mutable:test_2.process_statue_info.process_name)
  return _s;
}
inline const std::string& process_statue_info::_internal_process_name() const {
  return process_name_.Get();
}
inline void process_statue_info::_internal_set_process_name(const std::string& value) {
  
  process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* process_statue_info::_internal_mutable_process_name() {
  
  return process_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* process_statue_info::release_process_name() {
  // @@protoc_insertion_point(field_release:test_2.process_statue_info.process_name)
  return process_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void process_statue_info::set_allocated_process_name(std::string* process_name) {
  if (process_name != nullptr) {
    
  } else {
    
  }
  process_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (process_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.process_statue_info.process_name)
}

// int32 statue = 3;
inline void process_statue_info::clear_statue() {
  statue_ = 0;
}
inline int32_t process_statue_info::_internal_statue() const {
  return statue_;
}
inline int32_t process_statue_info::statue() const {
  // @@protoc_insertion_point(field_get:test_2.process_statue_info.statue)
  return _internal_statue();
}
inline void process_statue_info::_internal_set_statue(int32_t value) {
  
  statue_ = value;
}
inline void process_statue_info::set_statue(int32_t value) {
  _internal_set_statue(value);
  // @@protoc_insertion_point(field_set:test_2.process_statue_info.statue)
}

// -------------------------------------------------------------------

// send_process_listening_status_info

// repeated .test_2.process_statue_info infos = 1;
inline int send_process_listening_status_info::_internal_infos_size() const {
  return infos_.size();
}
inline int send_process_listening_status_info::infos_size() const {
  return _internal_infos_size();
}
inline void send_process_listening_status_info::clear_infos() {
  infos_.Clear();
}
inline ::test_2::process_statue_info* send_process_listening_status_info::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.send_process_listening_status_info.infos)
  return infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::process_statue_info >*
send_process_listening_status_info::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:test_2.send_process_listening_status_info.infos)
  return &infos_;
}
inline const ::test_2::process_statue_info& send_process_listening_status_info::_internal_infos(int index) const {
  return infos_.Get(index);
}
inline const ::test_2::process_statue_info& send_process_listening_status_info::infos(int index) const {
  // @@protoc_insertion_point(field_get:test_2.send_process_listening_status_info.infos)
  return _internal_infos(index);
}
inline ::test_2::process_statue_info* send_process_listening_status_info::_internal_add_infos() {
  return infos_.Add();
}
inline ::test_2::process_statue_info* send_process_listening_status_info::add_infos() {
  ::test_2::process_statue_info* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:test_2.send_process_listening_status_info.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::process_statue_info >&
send_process_listening_status_info::infos() const {
  // @@protoc_insertion_point(field_list:test_2.send_process_listening_status_info.infos)
  return infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test_2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test_2::client_msg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test_2::client_msg>() {
  return ::test_2::client_msg_descriptor();
}
template <> struct is_proto_enum< ::test_2::server_msg> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test_2::server_msg>() {
  return ::test_2::server_msg_descriptor();
}
template <> struct is_proto_enum< ::test_2::DATA_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test_2::DATA_TYPE>() {
  return ::test_2::DATA_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
