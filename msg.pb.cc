// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace test_2 {
constexpr client_login_request::client_login_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct client_login_requestDefaultTypeInternal {
  constexpr client_login_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_login_requestDefaultTypeInternal() {}
  union {
    client_login_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_login_requestDefaultTypeInternal _client_login_request_default_instance_;
constexpr server_send_file_tree_notify::server_send_file_tree_notify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lua_file_names_()
  , lua_table_file_names_()
  , group_names_(){}
struct server_send_file_tree_notifyDefaultTypeInternal {
  constexpr server_send_file_tree_notifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~server_send_file_tree_notifyDefaultTypeInternal() {}
  union {
    server_send_file_tree_notify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT server_send_file_tree_notifyDefaultTypeInternal _server_send_file_tree_notify_default_instance_;
constexpr server_send_shell_config_notify::server_send_shell_config_notify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shell_ops_(){}
struct server_send_shell_config_notifyDefaultTypeInternal {
  constexpr server_send_shell_config_notifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~server_send_shell_config_notifyDefaultTypeInternal() {}
  union {
    server_send_shell_config_notify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT server_send_shell_config_notifyDefaultTypeInternal _server_send_shell_config_notify_default_instance_;
constexpr client_lua_table_data_quest::client_lua_table_data_quest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , link_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct client_lua_table_data_questDefaultTypeInternal {
  constexpr client_lua_table_data_questDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_lua_table_data_questDefaultTypeInternal() {}
  union {
    client_lua_table_data_quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_lua_table_data_questDefaultTypeInternal _client_lua_table_data_quest_default_instance_;
constexpr client_shell_option_quest::client_shell_option_quest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : option_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct client_shell_option_questDefaultTypeInternal {
  constexpr client_shell_option_questDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_shell_option_questDefaultTypeInternal() {}
  union {
    client_shell_option_quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_shell_option_questDefaultTypeInternal _client_shell_option_quest_default_instance_;
constexpr server_send_current_time_notify::server_send_current_time_notify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_stamp_(int64_t{0}){}
struct server_send_current_time_notifyDefaultTypeInternal {
  constexpr server_send_current_time_notifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~server_send_current_time_notifyDefaultTypeInternal() {}
  union {
    server_send_current_time_notify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT server_send_current_time_notifyDefaultTypeInternal _server_send_current_time_notify_default_instance_;
constexpr pair_value::pair_value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct pair_valueDefaultTypeInternal {
  constexpr pair_valueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~pair_valueDefaultTypeInternal() {}
  union {
    pair_value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT pair_valueDefaultTypeInternal _pair_value_default_instance_;
constexpr field_type_pair::field_type_pair(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , lua_type_(0){}
struct field_type_pairDefaultTypeInternal {
  constexpr field_type_pairDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~field_type_pairDefaultTypeInternal() {}
  union {
    field_type_pair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT field_type_pairDefaultTypeInternal _field_type_pair_default_instance_;
constexpr row_data::row_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pair_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct row_dataDefaultTypeInternal {
  constexpr row_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~row_dataDefaultTypeInternal() {}
  union {
    row_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT row_dataDefaultTypeInternal _row_data_default_instance_;
constexpr field_info::field_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_link_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct field_infoDefaultTypeInternal {
  constexpr field_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~field_infoDefaultTypeInternal() {}
  union {
    field_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT field_infoDefaultTypeInternal _field_info_default_instance_;
constexpr field_squence::field_squence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , index_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct field_squenceDefaultTypeInternal {
  constexpr field_squenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~field_squenceDefaultTypeInternal() {}
  union {
    field_squence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT field_squenceDefaultTypeInternal _field_squence_default_instance_;
constexpr table_data::table_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filed_names_()
  , filed_types_()
  , row_lists_()
  , filed_sequences_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , link_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , row_count_(0)
  , column_count_(0){}
struct table_dataDefaultTypeInternal {
  constexpr table_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~table_dataDefaultTypeInternal() {}
  union {
    table_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT table_dataDefaultTypeInternal _table_data_default_instance_;
constexpr client_save_table_data_request::client_save_table_data_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_lists_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct client_save_table_data_requestDefaultTypeInternal {
  constexpr client_save_table_data_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_save_table_data_requestDefaultTypeInternal() {}
  union {
    client_save_table_data_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_save_table_data_requestDefaultTypeInternal _client_save_table_data_request_default_instance_;
constexpr send_shell_option_print_notify::send_shell_option_print_notify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : line_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , flag_(0){}
struct send_shell_option_print_notifyDefaultTypeInternal {
  constexpr send_shell_option_print_notifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~send_shell_option_print_notifyDefaultTypeInternal() {}
  union {
    send_shell_option_print_notify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT send_shell_option_print_notifyDefaultTypeInternal _send_shell_option_print_notify_default_instance_;
constexpr client_save_table_info_request::client_save_table_info_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_squences_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct client_save_table_info_requestDefaultTypeInternal {
  constexpr client_save_table_info_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_save_table_info_requestDefaultTypeInternal() {}
  union {
    client_save_table_info_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_save_table_info_requestDefaultTypeInternal _client_save_table_info_request_default_instance_;
constexpr send_server_current_time_nofity::send_server_current_time_nofity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(int64_t{0}){}
struct send_server_current_time_nofityDefaultTypeInternal {
  constexpr send_server_current_time_nofityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~send_server_current_time_nofityDefaultTypeInternal() {}
  union {
    send_server_current_time_nofity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT send_server_current_time_nofityDefaultTypeInternal _send_server_current_time_nofity_default_instance_;
constexpr client_modify_server_time_quest::client_modify_server_time_quest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(int64_t{0}){}
struct client_modify_server_time_questDefaultTypeInternal {
  constexpr client_modify_server_time_questDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_modify_server_time_questDefaultTypeInternal() {}
  union {
    client_modify_server_time_quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_modify_server_time_questDefaultTypeInternal _client_modify_server_time_quest_default_instance_;
constexpr client_lua_list_data_quest::client_lua_list_data_quest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , link_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct client_lua_list_data_questDefaultTypeInternal {
  constexpr client_lua_list_data_questDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_lua_list_data_questDefaultTypeInternal() {}
  union {
    client_lua_list_data_quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_lua_list_data_questDefaultTypeInternal _client_lua_list_data_quest_default_instance_;
constexpr field_type_key_value::field_type_key_value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct field_type_key_valueDefaultTypeInternal {
  constexpr field_type_key_valueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~field_type_key_valueDefaultTypeInternal() {}
  union {
    field_type_key_value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT field_type_key_valueDefaultTypeInternal _field_type_key_value_default_instance_;
constexpr send_lua_list_data_notify::send_lua_list_data_notify(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filed_types_()
  , filed_sequences_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , link_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct send_lua_list_data_notifyDefaultTypeInternal {
  constexpr send_lua_list_data_notifyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~send_lua_list_data_notifyDefaultTypeInternal() {}
  union {
    send_lua_list_data_notify _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT send_lua_list_data_notifyDefaultTypeInternal _send_lua_list_data_notify_default_instance_;
constexpr save_lua_list_data_request::save_lua_list_data_request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filed_types_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct save_lua_list_data_requestDefaultTypeInternal {
  constexpr save_lua_list_data_requestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~save_lua_list_data_requestDefaultTypeInternal() {}
  union {
    save_lua_list_data_request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT save_lua_list_data_requestDefaultTypeInternal _save_lua_list_data_request_default_instance_;
constexpr client_field_link_info_quest::client_field_link_info_quest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct client_field_link_info_questDefaultTypeInternal {
  constexpr client_field_link_info_questDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_field_link_info_questDefaultTypeInternal() {}
  union {
    client_field_link_info_quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_field_link_info_questDefaultTypeInternal _client_field_link_info_quest_default_instance_;
constexpr table_field_list::table_field_list(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct table_field_listDefaultTypeInternal {
  constexpr table_field_listDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~table_field_listDefaultTypeInternal() {}
  union {
    table_field_list _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT table_field_listDefaultTypeInternal _table_field_list_default_instance_;
constexpr send_field_link_info::send_field_link_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : table_()
  , list_(){}
struct send_field_link_infoDefaultTypeInternal {
  constexpr send_field_link_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~send_field_link_infoDefaultTypeInternal() {}
  union {
    send_field_link_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT send_field_link_infoDefaultTypeInternal _send_field_link_info_default_instance_;
constexpr process_statue_info::process_statue_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : process_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , statue_(0){}
struct process_statue_infoDefaultTypeInternal {
  constexpr process_statue_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~process_statue_infoDefaultTypeInternal() {}
  union {
    process_statue_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT process_statue_infoDefaultTypeInternal _process_statue_info_default_instance_;
constexpr send_process_listening_status_info::send_process_listening_status_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_(){}
struct send_process_listening_status_infoDefaultTypeInternal {
  constexpr send_process_listening_status_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~send_process_listening_status_infoDefaultTypeInternal() {}
  union {
    send_process_listening_status_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT send_process_listening_status_infoDefaultTypeInternal _send_process_listening_status_info_default_instance_;
constexpr client_request_field_link_info::client_request_field_link_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : link_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct client_request_field_link_infoDefaultTypeInternal {
  constexpr client_request_field_link_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~client_request_field_link_infoDefaultTypeInternal() {}
  union {
    client_request_field_link_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT client_request_field_link_infoDefaultTypeInternal _client_request_field_link_info_default_instance_;
constexpr link_field_info::link_field_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : field_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , field_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct link_field_infoDefaultTypeInternal {
  constexpr link_field_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~link_field_infoDefaultTypeInternal() {}
  union {
    link_field_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT link_field_infoDefaultTypeInternal _link_field_info_default_instance_;
constexpr send_field_all_values_info::send_field_all_values_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : infos_()
  , link_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct send_field_all_values_infoDefaultTypeInternal {
  constexpr send_field_all_values_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~send_field_all_values_infoDefaultTypeInternal() {}
  union {
    send_field_all_values_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT send_field_all_values_infoDefaultTypeInternal _send_field_all_values_info_default_instance_;
}  // namespace test_2
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[29];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_login_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_file_tree_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_file_tree_notify, lua_file_names_),
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_file_tree_notify, lua_table_file_names_),
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_file_tree_notify, group_names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_shell_config_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_shell_config_notify, shell_ops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_lua_table_data_quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_lua_table_data_quest, file_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::client_lua_table_data_quest, link_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_shell_option_quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_shell_option_quest, option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_current_time_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_current_time_notify, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::test_2::server_send_current_time_notify, time_zone_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::pair_value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::pair_value, key_),
  PROTOBUF_FIELD_OFFSET(::test_2::pair_value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_pair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_pair, key_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_pair, lua_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::row_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::row_data, key_),
  PROTOBUF_FIELD_OFFSET(::test_2::row_data, pair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::field_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::field_info, field_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_info, field_desc_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_info, field_link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::field_squence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::field_squence, index_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_squence, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, row_count_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, column_count_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, filed_names_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, filed_types_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, row_lists_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, filed_sequences_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_data, link_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_save_table_data_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_save_table_data_request, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::client_save_table_data_request, row_lists_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::send_shell_option_print_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::send_shell_option_print_notify, line_),
  PROTOBUF_FIELD_OFFSET(::test_2::send_shell_option_print_notify, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_save_table_info_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_save_table_info_request, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::client_save_table_info_request, field_squences_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::send_server_current_time_nofity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::send_server_current_time_nofity, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_modify_server_time_quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_modify_server_time_quest, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_lua_list_data_quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_lua_list_data_quest, file_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::client_lua_list_data_quest, link_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_key_value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_key_value, key_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_key_value, value_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_type_key_value, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::send_lua_list_data_notify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::send_lua_list_data_notify, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::send_lua_list_data_notify, filed_types_),
  PROTOBUF_FIELD_OFFSET(::test_2::send_lua_list_data_notify, filed_sequences_),
  PROTOBUF_FIELD_OFFSET(::test_2::send_lua_list_data_notify, link_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::save_lua_list_data_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::save_lua_list_data_request, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::save_lua_list_data_request, filed_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_field_link_info_quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::table_field_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::table_field_list, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_field_list, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::send_field_link_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::send_field_link_info, table_),
  PROTOBUF_FIELD_OFFSET(::test_2::send_field_link_info, list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::process_statue_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::process_statue_info, process_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::process_statue_info, statue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::send_process_listening_status_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::send_process_listening_status_info, infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::client_request_field_link_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::client_request_field_link_info, link_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::link_field_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::link_field_info, field_value_),
  PROTOBUF_FIELD_OFFSET(::test_2::link_field_info, field_desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::send_field_all_values_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::send_field_all_values_info, link_info_),
  PROTOBUF_FIELD_OFFSET(::test_2::send_field_all_values_info, infos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::test_2::client_login_request)},
  { 6, -1, -1, sizeof(::test_2::server_send_file_tree_notify)},
  { 15, -1, -1, sizeof(::test_2::server_send_shell_config_notify)},
  { 22, -1, -1, sizeof(::test_2::client_lua_table_data_quest)},
  { 30, -1, -1, sizeof(::test_2::client_shell_option_quest)},
  { 37, -1, -1, sizeof(::test_2::server_send_current_time_notify)},
  { 45, -1, -1, sizeof(::test_2::pair_value)},
  { 53, -1, -1, sizeof(::test_2::field_type_pair)},
  { 61, -1, -1, sizeof(::test_2::row_data)},
  { 69, -1, -1, sizeof(::test_2::field_info)},
  { 78, -1, -1, sizeof(::test_2::field_squence)},
  { 86, -1, -1, sizeof(::test_2::table_data)},
  { 100, -1, -1, sizeof(::test_2::client_save_table_data_request)},
  { 108, -1, -1, sizeof(::test_2::send_shell_option_print_notify)},
  { 116, -1, -1, sizeof(::test_2::client_save_table_info_request)},
  { 124, -1, -1, sizeof(::test_2::send_server_current_time_nofity)},
  { 131, -1, -1, sizeof(::test_2::client_modify_server_time_quest)},
  { 138, -1, -1, sizeof(::test_2::client_lua_list_data_quest)},
  { 146, -1, -1, sizeof(::test_2::field_type_key_value)},
  { 155, -1, -1, sizeof(::test_2::send_lua_list_data_notify)},
  { 165, -1, -1, sizeof(::test_2::save_lua_list_data_request)},
  { 173, -1, -1, sizeof(::test_2::client_field_link_info_quest)},
  { 179, -1, -1, sizeof(::test_2::table_field_list)},
  { 187, -1, -1, sizeof(::test_2::send_field_link_info)},
  { 195, -1, -1, sizeof(::test_2::process_statue_info)},
  { 203, -1, -1, sizeof(::test_2::send_process_listening_status_info)},
  { 210, -1, -1, sizeof(::test_2::client_request_field_link_info)},
  { 217, -1, -1, sizeof(::test_2::link_field_info)},
  { 225, -1, -1, sizeof(::test_2::send_field_all_values_info)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_login_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_server_send_file_tree_notify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_server_send_shell_config_notify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_lua_table_data_quest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_shell_option_quest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_server_send_current_time_notify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_pair_value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_field_type_pair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_row_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_field_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_field_squence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_table_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_save_table_data_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_send_shell_option_print_notify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_save_table_info_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_send_server_current_time_nofity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_modify_server_time_quest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_lua_list_data_quest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_field_type_key_value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_send_lua_list_data_notify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_save_lua_list_data_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_field_link_info_quest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_table_field_list_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_send_field_link_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_process_statue_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_send_process_listening_status_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_client_request_field_link_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_link_field_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_send_field_all_values_info_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\006test_2\"\026\n\024client_login_requ"
  "est\"i\n\034server_send_file_tree_notify\022\026\n\016l"
  "ua_file_names\030\001 \003(\014\022\034\n\024lua_table_file_na"
  "mes\030\002 \003(\014\022\023\n\013group_names\030\003 \003(\014\"4\n\037server"
  "_send_shell_config_notify\022\021\n\tshell_ops\030\001"
  " \003(\014\"C\n\033client_lua_table_data_quest\022\021\n\tf"
  "ile_name\030\001 \001(\014\022\021\n\tlink_info\030\002 \001(\014\"+\n\031cli"
  "ent_shell_option_quest\022\016\n\006option\030\001 \001(\014\"H"
  "\n\037server_send_current_time_notify\022\022\n\ntim"
  "e_stamp\030\001 \001(\003\022\021\n\ttime_zone\030\002 \001(\014\"(\n\npair"
  "_value\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014\"0\n\017fi"
  "eld_type_pair\022\013\n\003key\030\001 \001(\014\022\020\n\010lua_type\030\002"
  " \001(\005\"9\n\010row_data\022\013\n\003key\030\001 \001(\014\022 \n\004pair\030\002 "
  "\003(\0132\022.test_2.pair_value\"H\n\nfield_info\022\022\n"
  "\nfield_name\030\001 \001(\014\022\022\n\nfield_desc\030\002 \001(\014\022\022\n"
  "\nfield_link\030\003 \001(\014\"A\n\rfield_squence\022\r\n\005in"
  "dex\030\001 \001(\t\022!\n\005infos\030\002 \003(\0132\022.test_2.field_"
  "info\"\364\001\n\ntable_data\022\022\n\ntable_name\030\001 \001(\014\022"
  "\021\n\trow_count\030\002 \001(\005\022\024\n\014column_count\030\003 \001(\005"
  "\022\023\n\013filed_names\030\004 \003(\014\022,\n\013filed_types\030\005 \003"
  "(\0132\027.test_2.field_type_pair\022#\n\trow_lists"
  "\030\006 \003(\0132\020.test_2.row_data\022.\n\017filed_sequen"
  "ces\030\007 \003(\0132\025.test_2.field_squence\022\021\n\tlink"
  "_info\030\010 \001(\014\"Y\n\036client_save_table_data_re"
  "quest\022\022\n\ntable_name\030\001 \001(\014\022#\n\trow_lists\030\002"
  " \003(\0132\020.test_2.row_data\"<\n\036send_shell_opt"
  "ion_print_notify\022\014\n\004line\030\001 \001(\014\022\014\n\004flag\030\002"
  " \001(\005\"c\n\036client_save_table_info_request\022\022"
  "\n\ntable_name\030\001 \001(\014\022-\n\016field_squences\030\002 \003"
  "(\0132\025.test_2.field_squence\"/\n\037send_server"
  "_current_time_nofity\022\014\n\004time\030\001 \001(\003\"/\n\037cl"
  "ient_modify_server_time_quest\022\014\n\004time\030\001 "
  "\001(\003\"B\n\032client_lua_list_data_quest\022\021\n\tfil"
  "e_name\030\001 \001(\014\022\021\n\tlink_info\030\002 \001(\014\"@\n\024field"
  "_type_key_value\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 "
  "\001(\014\022\014\n\004type\030\003 \001(\005\"\245\001\n\031send_lua_list_data"
  "_notify\022\022\n\ntable_name\030\001 \001(\014\0221\n\013filed_typ"
  "es\030\002 \003(\0132\034.test_2.field_type_key_value\022."
  "\n\017filed_sequences\030\003 \003(\0132\025.test_2.field_s"
  "quence\022\021\n\tlink_info\030\004 \001(\014\"c\n\032save_lua_li"
  "st_data_request\022\022\n\ntable_name\030\001 \001(\014\0221\n\013f"
  "iled_types\030\002 \003(\0132\034.test_2.field_type_key"
  "_value\"\036\n\034client_field_link_info_quest\"6"
  "\n\020table_field_list\022\022\n\ntable_name\030\001 \001(\014\022\016"
  "\n\006fields\030\002 \003(\014\"g\n\024send_field_link_info\022\'"
  "\n\005table\030\001 \003(\0132\030.test_2.table_field_list\022"
  "&\n\004list\030\002 \003(\0132\030.test_2.table_field_list\""
  ";\n\023process_statue_info\022\024\n\014process_name\030\002"
  " \001(\014\022\016\n\006statue\030\003 \001(\005\"P\n\"send_process_lis"
  "tening_status_info\022*\n\005infos\030\001 \003(\0132\033.test"
  "_2.process_statue_info\"3\n\036client_request"
  "_field_link_info\022\021\n\tlink_info\030\001 \001(\014\":\n\017l"
  "ink_field_info\022\023\n\013field_value\030\001 \001(\014\022\022\n\nf"
  "ield_desc\030\002 \001(\014\"W\n\032send_field_all_values"
  "_info\022\021\n\tlink_info\030\001 \001(\014\022&\n\005infos\030\002 \003(\0132"
  "\027.test_2.link_field_info*\250\002\n\nclient_msg\022"
  "\021\n\rREQUEST_LOGIN\020\000\022\032\n\026REQUSET_LUA_TABLE_"
  "DATA\020\001\022\033\n\027REQUSET_SAVE_TABLE_DATA\020\002\022\031\n\025R"
  "EQUSET_SHELL_OPTIONS\020\003\022\033\n\027REQUEST_SAVE_T"
  "ABLE_INFO\020\004\022\036\n\032REQUEST_MODIFY_SERVER_TIM"
  "E\020\005\022\031\n\025REQUSET_LUA_LIST_DATA\020\006\022\036\n\032REQUSE"
  "T_SAVE_LUA_LIST_DATA\020\007\022\033\n\027REQUSET_FIELD_"
  "LINK_INFO\020\010\022\036\n\032REQUSET_FIELD_INFO_BY_LIN"
  "K\020\t*\365\001\n\nserver_msg\022\027\n\023SEND_FILE_TREE_INF"
  "O\020\000\022\024\n\020SEND_SERVER_TIME\020\001\022\027\n\023SEND_LUA_TA"
  "BLE_DATA\020\002\022\025\n\021SEND_SHELL_CONFIG\020\003\022\033\n\027SEN"
  "D_OPTION_SHELL_PRINT\020\004\022\026\n\022SEND_LUA_LIST_"
  "DATA\020\005\022\030\n\024SEND_FIELD_LINK_DATA\020\006\022\034\n\030SEND"
  "_PROCESS_STATUS_INFO\020\007\022\033\n\027SEND_FIELD_INF"
  "O_BY_LINK\020\010*W\n\tDATA_TYPE\022\014\n\010L_NUMBER\020\000\022\014"
  "\n\010L_STRING\020\001\022\n\n\006L_BOOL\020\002\022\022\n\016L_TABLE_STRI"
  "NG\020\003\022\016\n\nL_FUNCTION\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, 2868, descriptor_table_protodef_msg_2eproto, "msg.proto", 
  &descriptor_table_msg_2eproto_once, nullptr, 0, 29,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace test_2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* client_msg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool client_msg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* server_msg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool server_msg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DATA_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[2];
}
bool DATA_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class client_login_request::_Internal {
 public:
};

client_login_request::client_login_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:test_2.client_login_request)
}
client_login_request::client_login_request(const client_login_request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.client_login_request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_login_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_login_request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata client_login_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class server_send_file_tree_notify::_Internal {
 public:
};

server_send_file_tree_notify::server_send_file_tree_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  lua_file_names_(arena),
  lua_table_file_names_(arena),
  group_names_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.server_send_file_tree_notify)
}
server_send_file_tree_notify::server_send_file_tree_notify(const server_send_file_tree_notify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lua_file_names_(from.lua_file_names_),
      lua_table_file_names_(from.lua_table_file_names_),
      group_names_(from.group_names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.server_send_file_tree_notify)
}

inline void server_send_file_tree_notify::SharedCtor() {
}

server_send_file_tree_notify::~server_send_file_tree_notify() {
  // @@protoc_insertion_point(destructor:test_2.server_send_file_tree_notify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void server_send_file_tree_notify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void server_send_file_tree_notify::ArenaDtor(void* object) {
  server_send_file_tree_notify* _this = reinterpret_cast< server_send_file_tree_notify* >(object);
  (void)_this;
}
void server_send_file_tree_notify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void server_send_file_tree_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void server_send_file_tree_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.server_send_file_tree_notify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lua_file_names_.Clear();
  lua_table_file_names_.Clear();
  group_names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* server_send_file_tree_notify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes lua_file_names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lua_file_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes lua_table_file_names = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lua_table_file_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes group_names = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_group_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* server_send_file_tree_notify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.server_send_file_tree_notify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes lua_file_names = 1;
  for (int i = 0, n = this->_internal_lua_file_names_size(); i < n; i++) {
    const auto& s = this->_internal_lua_file_names(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated bytes lua_table_file_names = 2;
  for (int i = 0, n = this->_internal_lua_table_file_names_size(); i < n; i++) {
    const auto& s = this->_internal_lua_table_file_names(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes group_names = 3;
  for (int i = 0, n = this->_internal_group_names_size(); i < n; i++) {
    const auto& s = this->_internal_group_names(i);
    target = stream->WriteBytes(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.server_send_file_tree_notify)
  return target;
}

size_t server_send_file_tree_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.server_send_file_tree_notify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes lua_file_names = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lua_file_names_.size());
  for (int i = 0, n = lua_file_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      lua_file_names_.Get(i));
  }

  // repeated bytes lua_table_file_names = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(lua_table_file_names_.size());
  for (int i = 0, n = lua_table_file_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      lua_table_file_names_.Get(i));
  }

  // repeated bytes group_names = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(group_names_.size());
  for (int i = 0, n = group_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      group_names_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData server_send_file_tree_notify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    server_send_file_tree_notify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*server_send_file_tree_notify::GetClassData() const { return &_class_data_; }

void server_send_file_tree_notify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<server_send_file_tree_notify *>(to)->MergeFrom(
      static_cast<const server_send_file_tree_notify &>(from));
}


void server_send_file_tree_notify::MergeFrom(const server_send_file_tree_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.server_send_file_tree_notify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  lua_file_names_.MergeFrom(from.lua_file_names_);
  lua_table_file_names_.MergeFrom(from.lua_table_file_names_);
  group_names_.MergeFrom(from.group_names_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void server_send_file_tree_notify::CopyFrom(const server_send_file_tree_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.server_send_file_tree_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_send_file_tree_notify::IsInitialized() const {
  return true;
}

void server_send_file_tree_notify::InternalSwap(server_send_file_tree_notify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  lua_file_names_.InternalSwap(&other->lua_file_names_);
  lua_table_file_names_.InternalSwap(&other->lua_table_file_names_);
  group_names_.InternalSwap(&other->group_names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_send_file_tree_notify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class server_send_shell_config_notify::_Internal {
 public:
};

server_send_shell_config_notify::server_send_shell_config_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  shell_ops_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.server_send_shell_config_notify)
}
server_send_shell_config_notify::server_send_shell_config_notify(const server_send_shell_config_notify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shell_ops_(from.shell_ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.server_send_shell_config_notify)
}

inline void server_send_shell_config_notify::SharedCtor() {
}

server_send_shell_config_notify::~server_send_shell_config_notify() {
  // @@protoc_insertion_point(destructor:test_2.server_send_shell_config_notify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void server_send_shell_config_notify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void server_send_shell_config_notify::ArenaDtor(void* object) {
  server_send_shell_config_notify* _this = reinterpret_cast< server_send_shell_config_notify* >(object);
  (void)_this;
}
void server_send_shell_config_notify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void server_send_shell_config_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void server_send_shell_config_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.server_send_shell_config_notify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shell_ops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* server_send_shell_config_notify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes shell_ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_shell_ops();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* server_send_shell_config_notify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.server_send_shell_config_notify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes shell_ops = 1;
  for (int i = 0, n = this->_internal_shell_ops_size(); i < n; i++) {
    const auto& s = this->_internal_shell_ops(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.server_send_shell_config_notify)
  return target;
}

size_t server_send_shell_config_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.server_send_shell_config_notify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes shell_ops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(shell_ops_.size());
  for (int i = 0, n = shell_ops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      shell_ops_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData server_send_shell_config_notify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    server_send_shell_config_notify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*server_send_shell_config_notify::GetClassData() const { return &_class_data_; }

void server_send_shell_config_notify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<server_send_shell_config_notify *>(to)->MergeFrom(
      static_cast<const server_send_shell_config_notify &>(from));
}


void server_send_shell_config_notify::MergeFrom(const server_send_shell_config_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.server_send_shell_config_notify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  shell_ops_.MergeFrom(from.shell_ops_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void server_send_shell_config_notify::CopyFrom(const server_send_shell_config_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.server_send_shell_config_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_send_shell_config_notify::IsInitialized() const {
  return true;
}

void server_send_shell_config_notify::InternalSwap(server_send_shell_config_notify* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  shell_ops_.InternalSwap(&other->shell_ops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_send_shell_config_notify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class client_lua_table_data_quest::_Internal {
 public:
};

client_lua_table_data_quest::client_lua_table_data_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_lua_table_data_quest)
}
client_lua_table_data_quest::client_lua_table_data_quest(const client_lua_table_data_quest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_info().empty()) {
    link_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.client_lua_table_data_quest)
}

inline void client_lua_table_data_quest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_lua_table_data_quest::~client_lua_table_data_quest() {
  // @@protoc_insertion_point(destructor:test_2.client_lua_table_data_quest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_lua_table_data_quest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_lua_table_data_quest::ArenaDtor(void* object) {
  client_lua_table_data_quest* _this = reinterpret_cast< client_lua_table_data_quest* >(object);
  (void)_this;
}
void client_lua_table_data_quest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_lua_table_data_quest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_lua_table_data_quest::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_lua_table_data_quest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  link_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_lua_table_data_quest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes link_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_link_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_lua_table_data_quest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_lua_table_data_quest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file_name = 1;
  if (!this->_internal_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // bytes link_info = 2;
  if (!this->_internal_link_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_link_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_lua_table_data_quest)
  return target;
}

size_t client_lua_table_data_quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_lua_table_data_quest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_name());
  }

  // bytes link_info = 2;
  if (!this->_internal_link_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_link_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_lua_table_data_quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_lua_table_data_quest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_lua_table_data_quest::GetClassData() const { return &_class_data_; }

void client_lua_table_data_quest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_lua_table_data_quest *>(to)->MergeFrom(
      static_cast<const client_lua_table_data_quest &>(from));
}


void client_lua_table_data_quest::MergeFrom(const client_lua_table_data_quest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_lua_table_data_quest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_link_info().empty()) {
    _internal_set_link_info(from._internal_link_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_lua_table_data_quest::CopyFrom(const client_lua_table_data_quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_lua_table_data_quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_lua_table_data_quest::IsInitialized() const {
  return true;
}

void client_lua_table_data_quest::InternalSwap(client_lua_table_data_quest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_info_, lhs_arena,
      &other->link_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_lua_table_data_quest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class client_shell_option_quest::_Internal {
 public:
};

client_shell_option_quest::client_shell_option_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_shell_option_quest)
}
client_shell_option_quest::client_shell_option_quest(const client_shell_option_quest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  option_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    option_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_option().empty()) {
    option_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_option(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.client_shell_option_quest)
}

inline void client_shell_option_quest::SharedCtor() {
option_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  option_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_shell_option_quest::~client_shell_option_quest() {
  // @@protoc_insertion_point(destructor:test_2.client_shell_option_quest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_shell_option_quest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  option_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_shell_option_quest::ArenaDtor(void* object) {
  client_shell_option_quest* _this = reinterpret_cast< client_shell_option_quest* >(object);
  (void)_this;
}
void client_shell_option_quest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_shell_option_quest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_shell_option_quest::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_shell_option_quest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  option_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_shell_option_quest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes option = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_option();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_shell_option_quest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_shell_option_quest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes option = 1;
  if (!this->_internal_option().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_shell_option_quest)
  return target;
}

size_t client_shell_option_quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_shell_option_quest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes option = 1;
  if (!this->_internal_option().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_option());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_shell_option_quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_shell_option_quest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_shell_option_quest::GetClassData() const { return &_class_data_; }

void client_shell_option_quest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_shell_option_quest *>(to)->MergeFrom(
      static_cast<const client_shell_option_quest &>(from));
}


void client_shell_option_quest::MergeFrom(const client_shell_option_quest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_shell_option_quest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_option().empty()) {
    _internal_set_option(from._internal_option());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_shell_option_quest::CopyFrom(const client_shell_option_quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_shell_option_quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_shell_option_quest::IsInitialized() const {
  return true;
}

void client_shell_option_quest::InternalSwap(client_shell_option_quest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &option_, lhs_arena,
      &other->option_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_shell_option_quest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class server_send_current_time_notify::_Internal {
 public:
};

server_send_current_time_notify::server_send_current_time_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.server_send_current_time_notify)
}
server_send_current_time_notify::server_send_current_time_notify(const server_send_current_time_notify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_zone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_zone().empty()) {
    time_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_zone(), 
      GetArenaForAllocation());
  }
  time_stamp_ = from.time_stamp_;
  // @@protoc_insertion_point(copy_constructor:test_2.server_send_current_time_notify)
}

inline void server_send_current_time_notify::SharedCtor() {
time_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_zone_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_stamp_ = int64_t{0};
}

server_send_current_time_notify::~server_send_current_time_notify() {
  // @@protoc_insertion_point(destructor:test_2.server_send_current_time_notify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void server_send_current_time_notify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  time_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void server_send_current_time_notify::ArenaDtor(void* object) {
  server_send_current_time_notify* _this = reinterpret_cast< server_send_current_time_notify* >(object);
  (void)_this;
}
void server_send_current_time_notify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void server_send_current_time_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void server_send_current_time_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.server_send_current_time_notify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_zone_.ClearToEmpty();
  time_stamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* server_send_current_time_notify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes time_zone = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_time_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* server_send_current_time_notify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.server_send_current_time_notify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time_stamp = 1;
  if (this->_internal_time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time_stamp(), target);
  }

  // bytes time_zone = 2;
  if (!this->_internal_time_zone().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_time_zone(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.server_send_current_time_notify)
  return target;
}

size_t server_send_current_time_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.server_send_current_time_notify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes time_zone = 2;
  if (!this->_internal_time_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_time_zone());
  }

  // int64 time_stamp = 1;
  if (this->_internal_time_stamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData server_send_current_time_notify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    server_send_current_time_notify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*server_send_current_time_notify::GetClassData() const { return &_class_data_; }

void server_send_current_time_notify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<server_send_current_time_notify *>(to)->MergeFrom(
      static_cast<const server_send_current_time_notify &>(from));
}


void server_send_current_time_notify::MergeFrom(const server_send_current_time_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.server_send_current_time_notify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time_zone().empty()) {
    _internal_set_time_zone(from._internal_time_zone());
  }
  if (from._internal_time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void server_send_current_time_notify::CopyFrom(const server_send_current_time_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.server_send_current_time_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_send_current_time_notify::IsInitialized() const {
  return true;
}

void server_send_current_time_notify::InternalSwap(server_send_current_time_notify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_zone_, lhs_arena,
      &other->time_zone_, rhs_arena
  );
  swap(time_stamp_, other->time_stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata server_send_current_time_notify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class pair_value::_Internal {
 public:
};

pair_value::pair_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.pair_value)
}
pair_value::pair_value(const pair_value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.pair_value)
}

inline void pair_value::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

pair_value::~pair_value() {
  // @@protoc_insertion_point(destructor:test_2.pair_value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void pair_value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pair_value::ArenaDtor(void* object) {
  pair_value* _this = reinterpret_cast< pair_value* >(object);
  (void)_this;
}
void pair_value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pair_value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void pair_value::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.pair_value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pair_value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* pair_value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.pair_value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.pair_value)
  return target;
}

size_t pair_value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.pair_value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData pair_value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    pair_value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*pair_value::GetClassData() const { return &_class_data_; }

void pair_value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<pair_value *>(to)->MergeFrom(
      static_cast<const pair_value &>(from));
}


void pair_value::MergeFrom(const pair_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.pair_value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void pair_value::CopyFrom(const pair_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.pair_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pair_value::IsInitialized() const {
  return true;
}

void pair_value::InternalSwap(pair_value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata pair_value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// ===================================================================

class field_type_pair::_Internal {
 public:
};

field_type_pair::field_type_pair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.field_type_pair)
}
field_type_pair::field_type_pair(const field_type_pair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  lua_type_ = from.lua_type_;
  // @@protoc_insertion_point(copy_constructor:test_2.field_type_pair)
}

inline void field_type_pair::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
lua_type_ = 0;
}

field_type_pair::~field_type_pair() {
  // @@protoc_insertion_point(destructor:test_2.field_type_pair)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void field_type_pair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void field_type_pair::ArenaDtor(void* object) {
  field_type_pair* _this = reinterpret_cast< field_type_pair* >(object);
  (void)_this;
}
void field_type_pair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void field_type_pair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void field_type_pair::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.field_type_pair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  lua_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* field_type_pair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lua_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          lua_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* field_type_pair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.field_type_pair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // int32 lua_type = 2;
  if (this->_internal_lua_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lua_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.field_type_pair)
  return target;
}

size_t field_type_pair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.field_type_pair)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // int32 lua_type = 2;
  if (this->_internal_lua_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lua_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData field_type_pair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    field_type_pair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*field_type_pair::GetClassData() const { return &_class_data_; }

void field_type_pair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<field_type_pair *>(to)->MergeFrom(
      static_cast<const field_type_pair &>(from));
}


void field_type_pair::MergeFrom(const field_type_pair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.field_type_pair)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_lua_type() != 0) {
    _internal_set_lua_type(from._internal_lua_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void field_type_pair::CopyFrom(const field_type_pair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.field_type_pair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_type_pair::IsInitialized() const {
  return true;
}

void field_type_pair::InternalSwap(field_type_pair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  swap(lua_type_, other->lua_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata field_type_pair::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[7]);
}

// ===================================================================

class row_data::_Internal {
 public:
};

row_data::row_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pair_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.row_data)
}
row_data::row_data(const row_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pair_(from.pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.row_data)
}

inline void row_data::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

row_data::~row_data() {
  // @@protoc_insertion_point(destructor:test_2.row_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void row_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void row_data::ArenaDtor(void* object) {
  row_data* _this = reinterpret_cast< row_data* >(object);
  (void)_this;
}
void row_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void row_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void row_data::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.row_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pair_.Clear();
  key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* row_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.pair_value pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* row_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.row_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // repeated .test_2.pair_value pair = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.row_data)
  return target;
}

size_t row_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.row_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.pair_value pair = 2;
  total_size += 1UL * this->_internal_pair_size();
  for (const auto& msg : this->pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData row_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    row_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*row_data::GetClassData() const { return &_class_data_; }

void row_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<row_data *>(to)->MergeFrom(
      static_cast<const row_data &>(from));
}


void row_data::MergeFrom(const row_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.row_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pair_.MergeFrom(from.pair_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void row_data::CopyFrom(const row_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.row_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool row_data::IsInitialized() const {
  return true;
}

void row_data::InternalSwap(row_data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pair_.InternalSwap(&other->pair_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata row_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[8]);
}

// ===================================================================

class field_info::_Internal {
 public:
};

field_info::field_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.field_info)
}
field_info::field_info(const field_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_name().empty()) {
    field_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_name(), 
      GetArenaForAllocation());
  }
  field_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_desc().empty()) {
    field_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_desc(), 
      GetArenaForAllocation());
  }
  field_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_link().empty()) {
    field_link_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_link(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.field_info)
}

inline void field_info::SharedCtor() {
field_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
field_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
field_link_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_link_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

field_info::~field_info() {
  // @@protoc_insertion_point(destructor:test_2.field_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void field_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_link_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void field_info::ArenaDtor(void* object) {
  field_info* _this = reinterpret_cast< field_info* >(object);
  (void)_this;
}
void field_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void field_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void field_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.field_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_name_.ClearToEmpty();
  field_desc_.ClearToEmpty();
  field_link_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* field_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes field_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes field_desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_field_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes field_link = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_field_link();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* field_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.field_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes field_name = 1;
  if (!this->_internal_field_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_field_name(), target);
  }

  // bytes field_desc = 2;
  if (!this->_internal_field_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_field_desc(), target);
  }

  // bytes field_link = 3;
  if (!this->_internal_field_link().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_field_link(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.field_info)
  return target;
}

size_t field_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.field_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes field_name = 1;
  if (!this->_internal_field_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_name());
  }

  // bytes field_desc = 2;
  if (!this->_internal_field_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_desc());
  }

  // bytes field_link = 3;
  if (!this->_internal_field_link().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_link());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData field_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    field_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*field_info::GetClassData() const { return &_class_data_; }

void field_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<field_info *>(to)->MergeFrom(
      static_cast<const field_info &>(from));
}


void field_info::MergeFrom(const field_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.field_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field_name().empty()) {
    _internal_set_field_name(from._internal_field_name());
  }
  if (!from._internal_field_desc().empty()) {
    _internal_set_field_desc(from._internal_field_desc());
  }
  if (!from._internal_field_link().empty()) {
    _internal_set_field_link(from._internal_field_link());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void field_info::CopyFrom(const field_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.field_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_info::IsInitialized() const {
  return true;
}

void field_info::InternalSwap(field_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_name_, lhs_arena,
      &other->field_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_desc_, lhs_arena,
      &other->field_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_link_, lhs_arena,
      &other->field_link_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata field_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[9]);
}

// ===================================================================

class field_squence::_Internal {
 public:
};

field_squence::field_squence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.field_squence)
}
field_squence::field_squence(const field_squence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_index().empty()) {
    index_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_index(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.field_squence)
}

inline void field_squence::SharedCtor() {
index_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

field_squence::~field_squence() {
  // @@protoc_insertion_point(destructor:test_2.field_squence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void field_squence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  index_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void field_squence::ArenaDtor(void* object) {
  field_squence* _this = reinterpret_cast< field_squence* >(object);
  (void)_this;
}
void field_squence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void field_squence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void field_squence::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.field_squence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  index_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* field_squence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_index();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.field_squence.index"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_info infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* field_squence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.field_squence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string index = 1;
  if (!this->_internal_index().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index().data(), static_cast<int>(this->_internal_index().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.field_squence.index");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index(), target);
  }

  // repeated .test_2.field_info infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.field_squence)
  return target;
}

size_t field_squence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.field_squence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.field_info infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index = 1;
  if (!this->_internal_index().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData field_squence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    field_squence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*field_squence::GetClassData() const { return &_class_data_; }

void field_squence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<field_squence *>(to)->MergeFrom(
      static_cast<const field_squence &>(from));
}


void field_squence::MergeFrom(const field_squence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.field_squence)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (!from._internal_index().empty()) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void field_squence::CopyFrom(const field_squence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.field_squence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_squence::IsInitialized() const {
  return true;
}

void field_squence::InternalSwap(field_squence* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &index_, lhs_arena,
      &other->index_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata field_squence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[10]);
}

// ===================================================================

class table_data::_Internal {
 public:
};

table_data::table_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filed_names_(arena),
  filed_types_(arena),
  row_lists_(arena),
  filed_sequences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.table_data)
}
table_data::table_data(const table_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filed_names_(from.filed_names_),
      filed_types_(from.filed_types_),
      row_lists_(from.row_lists_),
      filed_sequences_(from.filed_sequences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_info().empty()) {
    link_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_info(), 
      GetArenaForAllocation());
  }
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
  // @@protoc_insertion_point(copy_constructor:test_2.table_data)
}

inline void table_data::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
}

table_data::~table_data() {
  // @@protoc_insertion_point(destructor:test_2.table_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void table_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void table_data::ArenaDtor(void* object) {
  table_data* _this = reinterpret_cast< table_data* >(object);
  (void)_this;
}
void table_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void table_data::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.table_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filed_names_.Clear();
  filed_types_.Clear();
  row_lists_.Clear();
  filed_sequences_.Clear();
  table_name_.ClearToEmpty();
  link_info_.ClearToEmpty();
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_count_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 column_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes filed_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filed_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_type_pair filed_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filed_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.row_data row_lists = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_squence filed_sequences = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filed_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes link_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_link_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* table_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.table_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_row_count(), target);
  }

  // int32 column_count = 3;
  if (this->_internal_column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_column_count(), target);
  }

  // repeated bytes filed_names = 4;
  for (int i = 0, n = this->_internal_filed_names_size(); i < n; i++) {
    const auto& s = this->_internal_filed_names(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated .test_2.field_type_pair filed_types = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filed_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_filed_types(i), target, stream);
  }

  // repeated .test_2.row_data row_lists = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_row_lists(i), target, stream);
  }

  // repeated .test_2.field_squence filed_sequences = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filed_sequences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_filed_sequences(i), target, stream);
  }

  // bytes link_info = 8;
  if (!this->_internal_link_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_link_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.table_data)
  return target;
}

size_t table_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.table_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes filed_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filed_names_.size());
  for (int i = 0, n = filed_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      filed_names_.Get(i));
  }

  // repeated .test_2.field_type_pair filed_types = 5;
  total_size += 1UL * this->_internal_filed_types_size();
  for (const auto& msg : this->filed_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .test_2.row_data row_lists = 6;
  total_size += 1UL * this->_internal_row_lists_size();
  for (const auto& msg : this->row_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .test_2.field_squence filed_sequences = 7;
  total_size += 1UL * this->_internal_filed_sequences_size();
  for (const auto& msg : this->filed_sequences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  // bytes link_info = 8;
  if (!this->_internal_link_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_link_info());
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_row_count());
  }

  // int32 column_count = 3;
  if (this->_internal_column_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_column_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData table_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    table_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*table_data::GetClassData() const { return &_class_data_; }

void table_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<table_data *>(to)->MergeFrom(
      static_cast<const table_data &>(from));
}


void table_data::MergeFrom(const table_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.table_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filed_names_.MergeFrom(from.filed_names_);
  filed_types_.MergeFrom(from.filed_types_);
  row_lists_.MergeFrom(from.row_lists_);
  filed_sequences_.MergeFrom(from.filed_sequences_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_link_info().empty()) {
    _internal_set_link_info(from._internal_link_info());
  }
  if (from._internal_row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void table_data::CopyFrom(const table_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.table_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_data::IsInitialized() const {
  return true;
}

void table_data::InternalSwap(table_data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filed_names_.InternalSwap(&other->filed_names_);
  filed_types_.InternalSwap(&other->filed_types_);
  row_lists_.InternalSwap(&other->row_lists_);
  filed_sequences_.InternalSwap(&other->filed_sequences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_info_, lhs_arena,
      &other->link_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(table_data, column_count_)
      + sizeof(table_data::column_count_)
      - PROTOBUF_FIELD_OFFSET(table_data, row_count_)>(
          reinterpret_cast<char*>(&row_count_),
          reinterpret_cast<char*>(&other->row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata table_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[11]);
}

// ===================================================================

class client_save_table_data_request::_Internal {
 public:
};

client_save_table_data_request::client_save_table_data_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  row_lists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_save_table_data_request)
}
client_save_table_data_request::client_save_table_data_request(const client_save_table_data_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_lists_(from.row_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.client_save_table_data_request)
}

inline void client_save_table_data_request::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_save_table_data_request::~client_save_table_data_request() {
  // @@protoc_insertion_point(destructor:test_2.client_save_table_data_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_save_table_data_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_save_table_data_request::ArenaDtor(void* object) {
  client_save_table_data_request* _this = reinterpret_cast< client_save_table_data_request* >(object);
  (void)_this;
}
void client_save_table_data_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_save_table_data_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_save_table_data_request::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_save_table_data_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_lists_.Clear();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_save_table_data_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.row_data row_lists = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_save_table_data_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_save_table_data_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated .test_2.row_data row_lists = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_row_lists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_save_table_data_request)
  return target;
}

size_t client_save_table_data_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_save_table_data_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.row_data row_lists = 2;
  total_size += 1UL * this->_internal_row_lists_size();
  for (const auto& msg : this->row_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_save_table_data_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_save_table_data_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_save_table_data_request::GetClassData() const { return &_class_data_; }

void client_save_table_data_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_save_table_data_request *>(to)->MergeFrom(
      static_cast<const client_save_table_data_request &>(from));
}


void client_save_table_data_request::MergeFrom(const client_save_table_data_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_save_table_data_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  row_lists_.MergeFrom(from.row_lists_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_save_table_data_request::CopyFrom(const client_save_table_data_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_save_table_data_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_save_table_data_request::IsInitialized() const {
  return true;
}

void client_save_table_data_request::InternalSwap(client_save_table_data_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_lists_.InternalSwap(&other->row_lists_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_save_table_data_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[12]);
}

// ===================================================================

class send_shell_option_print_notify::_Internal {
 public:
};

send_shell_option_print_notify::send_shell_option_print_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.send_shell_option_print_notify)
}
send_shell_option_print_notify::send_shell_option_print_notify(const send_shell_option_print_notify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_line().empty()) {
    line_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_line(), 
      GetArenaForAllocation());
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:test_2.send_shell_option_print_notify)
}

inline void send_shell_option_print_notify::SharedCtor() {
line_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  line_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
flag_ = 0;
}

send_shell_option_print_notify::~send_shell_option_print_notify() {
  // @@protoc_insertion_point(destructor:test_2.send_shell_option_print_notify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void send_shell_option_print_notify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  line_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void send_shell_option_print_notify::ArenaDtor(void* object) {
  send_shell_option_print_notify* _this = reinterpret_cast< send_shell_option_print_notify* >(object);
  (void)_this;
}
void send_shell_option_print_notify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_shell_option_print_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void send_shell_option_print_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.send_shell_option_print_notify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_.ClearToEmpty();
  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_shell_option_print_notify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_line();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* send_shell_option_print_notify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.send_shell_option_print_notify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes line = 1;
  if (!this->_internal_line().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_line(), target);
  }

  // int32 flag = 2;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.send_shell_option_print_notify)
  return target;
}

size_t send_shell_option_print_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.send_shell_option_print_notify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes line = 1;
  if (!this->_internal_line().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_line());
  }

  // int32 flag = 2;
  if (this->_internal_flag() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData send_shell_option_print_notify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    send_shell_option_print_notify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*send_shell_option_print_notify::GetClassData() const { return &_class_data_; }

void send_shell_option_print_notify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<send_shell_option_print_notify *>(to)->MergeFrom(
      static_cast<const send_shell_option_print_notify &>(from));
}


void send_shell_option_print_notify::MergeFrom(const send_shell_option_print_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.send_shell_option_print_notify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_line().empty()) {
    _internal_set_line(from._internal_line());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void send_shell_option_print_notify::CopyFrom(const send_shell_option_print_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.send_shell_option_print_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_shell_option_print_notify::IsInitialized() const {
  return true;
}

void send_shell_option_print_notify::InternalSwap(send_shell_option_print_notify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &line_, lhs_arena,
      &other->line_, rhs_arena
  );
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata send_shell_option_print_notify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[13]);
}

// ===================================================================

class client_save_table_info_request::_Internal {
 public:
};

client_save_table_info_request::client_save_table_info_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  field_squences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_save_table_info_request)
}
client_save_table_info_request::client_save_table_info_request(const client_save_table_info_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      field_squences_(from.field_squences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.client_save_table_info_request)
}

inline void client_save_table_info_request::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_save_table_info_request::~client_save_table_info_request() {
  // @@protoc_insertion_point(destructor:test_2.client_save_table_info_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_save_table_info_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_save_table_info_request::ArenaDtor(void* object) {
  client_save_table_info_request* _this = reinterpret_cast< client_save_table_info_request* >(object);
  (void)_this;
}
void client_save_table_info_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_save_table_info_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_save_table_info_request::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_save_table_info_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_squences_.Clear();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_save_table_info_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_squence field_squences = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_squences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_save_table_info_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_save_table_info_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated .test_2.field_squence field_squences = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_squences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_field_squences(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_save_table_info_request)
  return target;
}

size_t client_save_table_info_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_save_table_info_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.field_squence field_squences = 2;
  total_size += 1UL * this->_internal_field_squences_size();
  for (const auto& msg : this->field_squences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_save_table_info_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_save_table_info_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_save_table_info_request::GetClassData() const { return &_class_data_; }

void client_save_table_info_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_save_table_info_request *>(to)->MergeFrom(
      static_cast<const client_save_table_info_request &>(from));
}


void client_save_table_info_request::MergeFrom(const client_save_table_info_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_save_table_info_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field_squences_.MergeFrom(from.field_squences_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_save_table_info_request::CopyFrom(const client_save_table_info_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_save_table_info_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_save_table_info_request::IsInitialized() const {
  return true;
}

void client_save_table_info_request::InternalSwap(client_save_table_info_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_squences_.InternalSwap(&other->field_squences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_save_table_info_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[14]);
}

// ===================================================================

class send_server_current_time_nofity::_Internal {
 public:
};

send_server_current_time_nofity::send_server_current_time_nofity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.send_server_current_time_nofity)
}
send_server_current_time_nofity::send_server_current_time_nofity(const send_server_current_time_nofity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:test_2.send_server_current_time_nofity)
}

inline void send_server_current_time_nofity::SharedCtor() {
time_ = int64_t{0};
}

send_server_current_time_nofity::~send_server_current_time_nofity() {
  // @@protoc_insertion_point(destructor:test_2.send_server_current_time_nofity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void send_server_current_time_nofity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void send_server_current_time_nofity::ArenaDtor(void* object) {
  send_server_current_time_nofity* _this = reinterpret_cast< send_server_current_time_nofity* >(object);
  (void)_this;
}
void send_server_current_time_nofity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_server_current_time_nofity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void send_server_current_time_nofity::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.send_server_current_time_nofity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_server_current_time_nofity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* send_server_current_time_nofity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.send_server_current_time_nofity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.send_server_current_time_nofity)
  return target;
}

size_t send_server_current_time_nofity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.send_server_current_time_nofity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData send_server_current_time_nofity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    send_server_current_time_nofity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*send_server_current_time_nofity::GetClassData() const { return &_class_data_; }

void send_server_current_time_nofity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<send_server_current_time_nofity *>(to)->MergeFrom(
      static_cast<const send_server_current_time_nofity &>(from));
}


void send_server_current_time_nofity::MergeFrom(const send_server_current_time_nofity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.send_server_current_time_nofity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void send_server_current_time_nofity::CopyFrom(const send_server_current_time_nofity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.send_server_current_time_nofity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_server_current_time_nofity::IsInitialized() const {
  return true;
}

void send_server_current_time_nofity::InternalSwap(send_server_current_time_nofity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata send_server_current_time_nofity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[15]);
}

// ===================================================================

class client_modify_server_time_quest::_Internal {
 public:
};

client_modify_server_time_quest::client_modify_server_time_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_modify_server_time_quest)
}
client_modify_server_time_quest::client_modify_server_time_quest(const client_modify_server_time_quest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:test_2.client_modify_server_time_quest)
}

inline void client_modify_server_time_quest::SharedCtor() {
time_ = int64_t{0};
}

client_modify_server_time_quest::~client_modify_server_time_quest() {
  // @@protoc_insertion_point(destructor:test_2.client_modify_server_time_quest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_modify_server_time_quest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void client_modify_server_time_quest::ArenaDtor(void* object) {
  client_modify_server_time_quest* _this = reinterpret_cast< client_modify_server_time_quest* >(object);
  (void)_this;
}
void client_modify_server_time_quest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_modify_server_time_quest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_modify_server_time_quest::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_modify_server_time_quest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_modify_server_time_quest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_modify_server_time_quest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_modify_server_time_quest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_modify_server_time_quest)
  return target;
}

size_t client_modify_server_time_quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_modify_server_time_quest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->_internal_time() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_modify_server_time_quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_modify_server_time_quest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_modify_server_time_quest::GetClassData() const { return &_class_data_; }

void client_modify_server_time_quest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_modify_server_time_quest *>(to)->MergeFrom(
      static_cast<const client_modify_server_time_quest &>(from));
}


void client_modify_server_time_quest::MergeFrom(const client_modify_server_time_quest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_modify_server_time_quest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _internal_set_time(from._internal_time());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_modify_server_time_quest::CopyFrom(const client_modify_server_time_quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_modify_server_time_quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_modify_server_time_quest::IsInitialized() const {
  return true;
}

void client_modify_server_time_quest::InternalSwap(client_modify_server_time_quest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata client_modify_server_time_quest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[16]);
}

// ===================================================================

class client_lua_list_data_quest::_Internal {
 public:
};

client_lua_list_data_quest::client_lua_list_data_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_lua_list_data_quest)
}
client_lua_list_data_quest::client_lua_list_data_quest(const client_lua_list_data_quest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_info().empty()) {
    link_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.client_lua_list_data_quest)
}

inline void client_lua_list_data_quest::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_lua_list_data_quest::~client_lua_list_data_quest() {
  // @@protoc_insertion_point(destructor:test_2.client_lua_list_data_quest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_lua_list_data_quest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_lua_list_data_quest::ArenaDtor(void* object) {
  client_lua_list_data_quest* _this = reinterpret_cast< client_lua_list_data_quest* >(object);
  (void)_this;
}
void client_lua_list_data_quest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_lua_list_data_quest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_lua_list_data_quest::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_lua_list_data_quest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  link_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_lua_list_data_quest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes link_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_link_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_lua_list_data_quest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_lua_list_data_quest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes file_name = 1;
  if (!this->_internal_file_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // bytes link_info = 2;
  if (!this->_internal_link_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_link_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_lua_list_data_quest)
  return target;
}

size_t client_lua_list_data_quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_lua_list_data_quest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes file_name = 1;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_file_name());
  }

  // bytes link_info = 2;
  if (!this->_internal_link_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_link_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_lua_list_data_quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_lua_list_data_quest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_lua_list_data_quest::GetClassData() const { return &_class_data_; }

void client_lua_list_data_quest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_lua_list_data_quest *>(to)->MergeFrom(
      static_cast<const client_lua_list_data_quest &>(from));
}


void client_lua_list_data_quest::MergeFrom(const client_lua_list_data_quest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_lua_list_data_quest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (!from._internal_link_info().empty()) {
    _internal_set_link_info(from._internal_link_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_lua_list_data_quest::CopyFrom(const client_lua_list_data_quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_lua_list_data_quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_lua_list_data_quest::IsInitialized() const {
  return true;
}

void client_lua_list_data_quest::InternalSwap(client_lua_list_data_quest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_info_, lhs_arena,
      &other->link_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_lua_list_data_quest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[17]);
}

// ===================================================================

class field_type_key_value::_Internal {
 public:
};

field_type_key_value::field_type_key_value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.field_type_key_value)
}
field_type_key_value::field_type_key_value(const field_type_key_value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:test_2.field_type_key_value)
}

inline void field_type_key_value::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

field_type_key_value::~field_type_key_value() {
  // @@protoc_insertion_point(destructor:test_2.field_type_key_value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void field_type_key_value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void field_type_key_value::ArenaDtor(void* object) {
  field_type_key_value* _this = reinterpret_cast< field_type_key_value* >(object);
  (void)_this;
}
void field_type_key_value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void field_type_key_value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void field_type_key_value::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.field_type_key_value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* field_type_key_value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* field_type_key_value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.field_type_key_value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.field_type_key_value)
  return target;
}

size_t field_type_key_value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.field_type_key_value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData field_type_key_value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    field_type_key_value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*field_type_key_value::GetClassData() const { return &_class_data_; }

void field_type_key_value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<field_type_key_value *>(to)->MergeFrom(
      static_cast<const field_type_key_value &>(from));
}


void field_type_key_value::MergeFrom(const field_type_key_value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.field_type_key_value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void field_type_key_value::CopyFrom(const field_type_key_value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.field_type_key_value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_type_key_value::IsInitialized() const {
  return true;
}

void field_type_key_value::InternalSwap(field_type_key_value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata field_type_key_value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[18]);
}

// ===================================================================

class send_lua_list_data_notify::_Internal {
 public:
};

send_lua_list_data_notify::send_lua_list_data_notify(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filed_types_(arena),
  filed_sequences_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.send_lua_list_data_notify)
}
send_lua_list_data_notify::send_lua_list_data_notify(const send_lua_list_data_notify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filed_types_(from.filed_types_),
      filed_sequences_(from.filed_sequences_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_info().empty()) {
    link_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.send_lua_list_data_notify)
}

inline void send_lua_list_data_notify::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

send_lua_list_data_notify::~send_lua_list_data_notify() {
  // @@protoc_insertion_point(destructor:test_2.send_lua_list_data_notify)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void send_lua_list_data_notify::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  link_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void send_lua_list_data_notify::ArenaDtor(void* object) {
  send_lua_list_data_notify* _this = reinterpret_cast< send_lua_list_data_notify* >(object);
  (void)_this;
}
void send_lua_list_data_notify::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_lua_list_data_notify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void send_lua_list_data_notify::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.send_lua_list_data_notify)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filed_types_.Clear();
  filed_sequences_.Clear();
  table_name_.ClearToEmpty();
  link_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_lua_list_data_notify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_type_key_value filed_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filed_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_squence filed_sequences = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filed_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes link_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_link_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* send_lua_list_data_notify::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.send_lua_list_data_notify)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated .test_2.field_type_key_value filed_types = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filed_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filed_types(i), target, stream);
  }

  // repeated .test_2.field_squence filed_sequences = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filed_sequences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_filed_sequences(i), target, stream);
  }

  // bytes link_info = 4;
  if (!this->_internal_link_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_link_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.send_lua_list_data_notify)
  return target;
}

size_t send_lua_list_data_notify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.send_lua_list_data_notify)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.field_type_key_value filed_types = 2;
  total_size += 1UL * this->_internal_filed_types_size();
  for (const auto& msg : this->filed_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .test_2.field_squence filed_sequences = 3;
  total_size += 1UL * this->_internal_filed_sequences_size();
  for (const auto& msg : this->filed_sequences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  // bytes link_info = 4;
  if (!this->_internal_link_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_link_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData send_lua_list_data_notify::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    send_lua_list_data_notify::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*send_lua_list_data_notify::GetClassData() const { return &_class_data_; }

void send_lua_list_data_notify::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<send_lua_list_data_notify *>(to)->MergeFrom(
      static_cast<const send_lua_list_data_notify &>(from));
}


void send_lua_list_data_notify::MergeFrom(const send_lua_list_data_notify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.send_lua_list_data_notify)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filed_types_.MergeFrom(from.filed_types_);
  filed_sequences_.MergeFrom(from.filed_sequences_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (!from._internal_link_info().empty()) {
    _internal_set_link_info(from._internal_link_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void send_lua_list_data_notify::CopyFrom(const send_lua_list_data_notify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.send_lua_list_data_notify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_lua_list_data_notify::IsInitialized() const {
  return true;
}

void send_lua_list_data_notify::InternalSwap(send_lua_list_data_notify* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filed_types_.InternalSwap(&other->filed_types_);
  filed_sequences_.InternalSwap(&other->filed_sequences_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_info_, lhs_arena,
      &other->link_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata send_lua_list_data_notify::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[19]);
}

// ===================================================================

class save_lua_list_data_request::_Internal {
 public:
};

save_lua_list_data_request::save_lua_list_data_request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filed_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.save_lua_list_data_request)
}
save_lua_list_data_request::save_lua_list_data_request(const save_lua_list_data_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filed_types_(from.filed_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.save_lua_list_data_request)
}

inline void save_lua_list_data_request::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

save_lua_list_data_request::~save_lua_list_data_request() {
  // @@protoc_insertion_point(destructor:test_2.save_lua_list_data_request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void save_lua_list_data_request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void save_lua_list_data_request::ArenaDtor(void* object) {
  save_lua_list_data_request* _this = reinterpret_cast< save_lua_list_data_request* >(object);
  (void)_this;
}
void save_lua_list_data_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void save_lua_list_data_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void save_lua_list_data_request::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.save_lua_list_data_request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filed_types_.Clear();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* save_lua_list_data_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_type_key_value filed_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filed_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* save_lua_list_data_request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.save_lua_list_data_request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated .test_2.field_type_key_value filed_types = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filed_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_filed_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.save_lua_list_data_request)
  return target;
}

size_t save_lua_list_data_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.save_lua_list_data_request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.field_type_key_value filed_types = 2;
  total_size += 1UL * this->_internal_filed_types_size();
  for (const auto& msg : this->filed_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData save_lua_list_data_request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    save_lua_list_data_request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*save_lua_list_data_request::GetClassData() const { return &_class_data_; }

void save_lua_list_data_request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<save_lua_list_data_request *>(to)->MergeFrom(
      static_cast<const save_lua_list_data_request &>(from));
}


void save_lua_list_data_request::MergeFrom(const save_lua_list_data_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.save_lua_list_data_request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filed_types_.MergeFrom(from.filed_types_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void save_lua_list_data_request::CopyFrom(const save_lua_list_data_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.save_lua_list_data_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool save_lua_list_data_request::IsInitialized() const {
  return true;
}

void save_lua_list_data_request::InternalSwap(save_lua_list_data_request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filed_types_.InternalSwap(&other->filed_types_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata save_lua_list_data_request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[20]);
}

// ===================================================================

class client_field_link_info_quest::_Internal {
 public:
};

client_field_link_info_quest::client_field_link_info_quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:test_2.client_field_link_info_quest)
}
client_field_link_info_quest::client_field_link_info_quest(const client_field_link_info_quest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.client_field_link_info_quest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_field_link_info_quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_field_link_info_quest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata client_field_link_info_quest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[21]);
}

// ===================================================================

class table_field_list::_Internal {
 public:
};

table_field_list::table_field_list(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.table_field_list)
}
table_field_list::table_field_list(const table_field_list& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.table_field_list)
}

inline void table_field_list::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

table_field_list::~table_field_list() {
  // @@protoc_insertion_point(destructor:test_2.table_field_list)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void table_field_list::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void table_field_list::ArenaDtor(void* object) {
  table_field_list* _this = reinterpret_cast< table_field_list* >(object);
  (void)_this;
}
void table_field_list::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table_field_list::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void table_field_list::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.table_field_list)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  table_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table_field_list::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fields();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* table_field_list::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.table_field_list)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // repeated bytes fields = 2;
  for (int i = 0, n = this->_internal_fields_size(); i < n; i++) {
    const auto& s = this->_internal_fields(i);
    target = stream->WriteBytes(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.table_field_list)
  return target;
}

size_t table_field_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.table_field_list)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes fields = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(fields_.size());
  for (int i = 0, n = fields_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      fields_.Get(i));
  }

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData table_field_list::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    table_field_list::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*table_field_list::GetClassData() const { return &_class_data_; }

void table_field_list::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<table_field_list *>(to)->MergeFrom(
      static_cast<const table_field_list &>(from));
}


void table_field_list::MergeFrom(const table_field_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.table_field_list)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void table_field_list::CopyFrom(const table_field_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.table_field_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_field_list::IsInitialized() const {
  return true;
}

void table_field_list::InternalSwap(table_field_list* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata table_field_list::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[22]);
}

// ===================================================================

class send_field_link_info::_Internal {
 public:
};

send_field_link_info::send_field_link_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  table_(arena),
  list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.send_field_link_info)
}
send_field_link_info::send_field_link_info(const send_field_link_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      table_(from.table_),
      list_(from.list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.send_field_link_info)
}

inline void send_field_link_info::SharedCtor() {
}

send_field_link_info::~send_field_link_info() {
  // @@protoc_insertion_point(destructor:test_2.send_field_link_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void send_field_link_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void send_field_link_info::ArenaDtor(void* object) {
  send_field_link_info* _this = reinterpret_cast< send_field_link_info* >(object);
  (void)_this;
}
void send_field_link_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_field_link_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void send_field_link_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.send_field_link_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_.Clear();
  list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_field_link_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .test_2.table_field_list table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.table_field_list list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* send_field_link_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.send_field_link_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .test_2.table_field_list table = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_table_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_table(i), target, stream);
  }

  // repeated .test_2.table_field_list list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.send_field_link_info)
  return target;
}

size_t send_field_link_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.send_field_link_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.table_field_list table = 1;
  total_size += 1UL * this->_internal_table_size();
  for (const auto& msg : this->table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .test_2.table_field_list list = 2;
  total_size += 1UL * this->_internal_list_size();
  for (const auto& msg : this->list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData send_field_link_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    send_field_link_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*send_field_link_info::GetClassData() const { return &_class_data_; }

void send_field_link_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<send_field_link_info *>(to)->MergeFrom(
      static_cast<const send_field_link_info &>(from));
}


void send_field_link_info::MergeFrom(const send_field_link_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.send_field_link_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  table_.MergeFrom(from.table_);
  list_.MergeFrom(from.list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void send_field_link_info::CopyFrom(const send_field_link_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.send_field_link_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_field_link_info::IsInitialized() const {
  return true;
}

void send_field_link_info::InternalSwap(send_field_link_info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  table_.InternalSwap(&other->table_);
  list_.InternalSwap(&other->list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata send_field_link_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[23]);
}

// ===================================================================

class process_statue_info::_Internal {
 public:
};

process_statue_info::process_statue_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.process_statue_info)
}
process_statue_info::process_statue_info(const process_statue_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_process_name().empty()) {
    process_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_process_name(), 
      GetArenaForAllocation());
  }
  statue_ = from.statue_;
  // @@protoc_insertion_point(copy_constructor:test_2.process_statue_info)
}

inline void process_statue_info::SharedCtor() {
process_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  process_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
statue_ = 0;
}

process_statue_info::~process_statue_info() {
  // @@protoc_insertion_point(destructor:test_2.process_statue_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void process_statue_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  process_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void process_statue_info::ArenaDtor(void* object) {
  process_statue_info* _this = reinterpret_cast< process_statue_info* >(object);
  (void)_this;
}
void process_statue_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void process_statue_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void process_statue_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.process_statue_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  process_name_.ClearToEmpty();
  statue_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* process_statue_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 statue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          statue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* process_statue_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.process_statue_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes process_name = 2;
  if (!this->_internal_process_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // int32 statue = 3;
  if (this->_internal_statue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_statue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.process_statue_info)
  return target;
}

size_t process_statue_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.process_statue_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes process_name = 2;
  if (!this->_internal_process_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_process_name());
  }

  // int32 statue = 3;
  if (this->_internal_statue() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_statue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData process_statue_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    process_statue_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*process_statue_info::GetClassData() const { return &_class_data_; }

void process_statue_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<process_statue_info *>(to)->MergeFrom(
      static_cast<const process_statue_info &>(from));
}


void process_statue_info::MergeFrom(const process_statue_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.process_statue_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_process_name().empty()) {
    _internal_set_process_name(from._internal_process_name());
  }
  if (from._internal_statue() != 0) {
    _internal_set_statue(from._internal_statue());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void process_statue_info::CopyFrom(const process_statue_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.process_statue_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool process_statue_info::IsInitialized() const {
  return true;
}

void process_statue_info::InternalSwap(process_statue_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &process_name_, lhs_arena,
      &other->process_name_, rhs_arena
  );
  swap(statue_, other->statue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata process_statue_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[24]);
}

// ===================================================================

class send_process_listening_status_info::_Internal {
 public:
};

send_process_listening_status_info::send_process_listening_status_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.send_process_listening_status_info)
}
send_process_listening_status_info::send_process_listening_status_info(const send_process_listening_status_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.send_process_listening_status_info)
}

inline void send_process_listening_status_info::SharedCtor() {
}

send_process_listening_status_info::~send_process_listening_status_info() {
  // @@protoc_insertion_point(destructor:test_2.send_process_listening_status_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void send_process_listening_status_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void send_process_listening_status_info::ArenaDtor(void* object) {
  send_process_listening_status_info* _this = reinterpret_cast< send_process_listening_status_info* >(object);
  (void)_this;
}
void send_process_listening_status_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_process_listening_status_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void send_process_listening_status_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.send_process_listening_status_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_process_listening_status_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .test_2.process_statue_info infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* send_process_listening_status_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.send_process_listening_status_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .test_2.process_statue_info infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.send_process_listening_status_info)
  return target;
}

size_t send_process_listening_status_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.send_process_listening_status_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.process_statue_info infos = 1;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData send_process_listening_status_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    send_process_listening_status_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*send_process_listening_status_info::GetClassData() const { return &_class_data_; }

void send_process_listening_status_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<send_process_listening_status_info *>(to)->MergeFrom(
      static_cast<const send_process_listening_status_info &>(from));
}


void send_process_listening_status_info::MergeFrom(const send_process_listening_status_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.send_process_listening_status_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void send_process_listening_status_info::CopyFrom(const send_process_listening_status_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.send_process_listening_status_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_process_listening_status_info::IsInitialized() const {
  return true;
}

void send_process_listening_status_info::InternalSwap(send_process_listening_status_info* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata send_process_listening_status_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[25]);
}

// ===================================================================

class client_request_field_link_info::_Internal {
 public:
};

client_request_field_link_info::client_request_field_link_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.client_request_field_link_info)
}
client_request_field_link_info::client_request_field_link_info(const client_request_field_link_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_info().empty()) {
    link_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.client_request_field_link_info)
}

inline void client_request_field_link_info::SharedCtor() {
link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

client_request_field_link_info::~client_request_field_link_info() {
  // @@protoc_insertion_point(destructor:test_2.client_request_field_link_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void client_request_field_link_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  link_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void client_request_field_link_info::ArenaDtor(void* object) {
  client_request_field_link_info* _this = reinterpret_cast< client_request_field_link_info* >(object);
  (void)_this;
}
void client_request_field_link_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void client_request_field_link_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void client_request_field_link_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.client_request_field_link_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* client_request_field_link_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes link_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_link_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* client_request_field_link_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.client_request_field_link_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes link_info = 1;
  if (!this->_internal_link_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_link_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.client_request_field_link_info)
  return target;
}

size_t client_request_field_link_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.client_request_field_link_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes link_info = 1;
  if (!this->_internal_link_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_link_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData client_request_field_link_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    client_request_field_link_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*client_request_field_link_info::GetClassData() const { return &_class_data_; }

void client_request_field_link_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<client_request_field_link_info *>(to)->MergeFrom(
      static_cast<const client_request_field_link_info &>(from));
}


void client_request_field_link_info::MergeFrom(const client_request_field_link_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.client_request_field_link_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_link_info().empty()) {
    _internal_set_link_info(from._internal_link_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void client_request_field_link_info::CopyFrom(const client_request_field_link_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.client_request_field_link_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_request_field_link_info::IsInitialized() const {
  return true;
}

void client_request_field_link_info::InternalSwap(client_request_field_link_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_info_, lhs_arena,
      &other->link_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata client_request_field_link_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[26]);
}

// ===================================================================

class link_field_info::_Internal {
 public:
};

link_field_info::link_field_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.link_field_info)
}
link_field_info::link_field_info(const link_field_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_value().empty()) {
    field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_value(), 
      GetArenaForAllocation());
  }
  field_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    field_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_field_desc().empty()) {
    field_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_field_desc(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.link_field_info)
}

inline void link_field_info::SharedCtor() {
field_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
field_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  field_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

link_field_info::~link_field_info() {
  // @@protoc_insertion_point(destructor:test_2.link_field_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void link_field_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  field_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  field_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void link_field_info::ArenaDtor(void* object) {
  link_field_info* _this = reinterpret_cast< link_field_info* >(object);
  (void)_this;
}
void link_field_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void link_field_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void link_field_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.link_field_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_value_.ClearToEmpty();
  field_desc_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* link_field_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes field_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_field_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes field_desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_field_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* link_field_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.link_field_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes field_value = 1;
  if (!this->_internal_field_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_field_value(), target);
  }

  // bytes field_desc = 2;
  if (!this->_internal_field_desc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_field_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.link_field_info)
  return target;
}

size_t link_field_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.link_field_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes field_value = 1;
  if (!this->_internal_field_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_value());
  }

  // bytes field_desc = 2;
  if (!this->_internal_field_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_field_desc());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData link_field_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    link_field_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*link_field_info::GetClassData() const { return &_class_data_; }

void link_field_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<link_field_info *>(to)->MergeFrom(
      static_cast<const link_field_info &>(from));
}


void link_field_info::MergeFrom(const link_field_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.link_field_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_field_value().empty()) {
    _internal_set_field_value(from._internal_field_value());
  }
  if (!from._internal_field_desc().empty()) {
    _internal_set_field_desc(from._internal_field_desc());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void link_field_info::CopyFrom(const link_field_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.link_field_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool link_field_info::IsInitialized() const {
  return true;
}

void link_field_info::InternalSwap(link_field_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_value_, lhs_arena,
      &other->field_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &field_desc_, lhs_arena,
      &other->field_desc_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata link_field_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[27]);
}

// ===================================================================

class send_field_all_values_info::_Internal {
 public:
};

send_field_all_values_info::send_field_all_values_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  infos_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.send_field_all_values_info)
}
send_field_all_values_info::send_field_all_values_info(const send_field_all_values_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_link_info().empty()) {
    link_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_link_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.send_field_all_values_info)
}

inline void send_field_all_values_info::SharedCtor() {
link_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  link_info_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

send_field_all_values_info::~send_field_all_values_info() {
  // @@protoc_insertion_point(destructor:test_2.send_field_all_values_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void send_field_all_values_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  link_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void send_field_all_values_info::ArenaDtor(void* object) {
  send_field_all_values_info* _this = reinterpret_cast< send_field_all_values_info* >(object);
  (void)_this;
}
void send_field_all_values_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void send_field_all_values_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void send_field_all_values_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.send_field_all_values_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  link_info_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* send_field_all_values_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes link_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_link_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.link_field_info infos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* send_field_all_values_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.send_field_all_values_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes link_info = 1;
  if (!this->_internal_link_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_link_info(), target);
  }

  // repeated .test_2.link_field_info infos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.send_field_all_values_info)
  return target;
}

size_t send_field_all_values_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.send_field_all_values_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .test_2.link_field_info infos = 2;
  total_size += 1UL * this->_internal_infos_size();
  for (const auto& msg : this->infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes link_info = 1;
  if (!this->_internal_link_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_link_info());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData send_field_all_values_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    send_field_all_values_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*send_field_all_values_info::GetClassData() const { return &_class_data_; }

void send_field_all_values_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<send_field_all_values_info *>(to)->MergeFrom(
      static_cast<const send_field_all_values_info &>(from));
}


void send_field_all_values_info::MergeFrom(const send_field_all_values_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.send_field_all_values_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
  if (!from._internal_link_info().empty()) {
    _internal_set_link_info(from._internal_link_info());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void send_field_all_values_info::CopyFrom(const send_field_all_values_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.send_field_all_values_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool send_field_all_values_info::IsInitialized() const {
  return true;
}

void send_field_all_values_info::InternalSwap(send_field_all_values_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  infos_.InternalSwap(&other->infos_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &link_info_, lhs_arena,
      &other->link_info_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata send_field_all_values_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[28]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace test_2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test_2::client_login_request* Arena::CreateMaybeMessage< ::test_2::client_login_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_login_request >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::server_send_file_tree_notify* Arena::CreateMaybeMessage< ::test_2::server_send_file_tree_notify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::server_send_file_tree_notify >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::server_send_shell_config_notify* Arena::CreateMaybeMessage< ::test_2::server_send_shell_config_notify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::server_send_shell_config_notify >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_lua_table_data_quest* Arena::CreateMaybeMessage< ::test_2::client_lua_table_data_quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_lua_table_data_quest >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_shell_option_quest* Arena::CreateMaybeMessage< ::test_2::client_shell_option_quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_shell_option_quest >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::server_send_current_time_notify* Arena::CreateMaybeMessage< ::test_2::server_send_current_time_notify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::server_send_current_time_notify >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::pair_value* Arena::CreateMaybeMessage< ::test_2::pair_value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::pair_value >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::field_type_pair* Arena::CreateMaybeMessage< ::test_2::field_type_pair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::field_type_pair >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::row_data* Arena::CreateMaybeMessage< ::test_2::row_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::row_data >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::field_info* Arena::CreateMaybeMessage< ::test_2::field_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::field_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::field_squence* Arena::CreateMaybeMessage< ::test_2::field_squence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::field_squence >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::table_data* Arena::CreateMaybeMessage< ::test_2::table_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::table_data >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_save_table_data_request* Arena::CreateMaybeMessage< ::test_2::client_save_table_data_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_save_table_data_request >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::send_shell_option_print_notify* Arena::CreateMaybeMessage< ::test_2::send_shell_option_print_notify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::send_shell_option_print_notify >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_save_table_info_request* Arena::CreateMaybeMessage< ::test_2::client_save_table_info_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_save_table_info_request >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::send_server_current_time_nofity* Arena::CreateMaybeMessage< ::test_2::send_server_current_time_nofity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::send_server_current_time_nofity >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_modify_server_time_quest* Arena::CreateMaybeMessage< ::test_2::client_modify_server_time_quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_modify_server_time_quest >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_lua_list_data_quest* Arena::CreateMaybeMessage< ::test_2::client_lua_list_data_quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_lua_list_data_quest >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::field_type_key_value* Arena::CreateMaybeMessage< ::test_2::field_type_key_value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::field_type_key_value >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::send_lua_list_data_notify* Arena::CreateMaybeMessage< ::test_2::send_lua_list_data_notify >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::send_lua_list_data_notify >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::save_lua_list_data_request* Arena::CreateMaybeMessage< ::test_2::save_lua_list_data_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::save_lua_list_data_request >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_field_link_info_quest* Arena::CreateMaybeMessage< ::test_2::client_field_link_info_quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_field_link_info_quest >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::table_field_list* Arena::CreateMaybeMessage< ::test_2::table_field_list >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::table_field_list >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::send_field_link_info* Arena::CreateMaybeMessage< ::test_2::send_field_link_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::send_field_link_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::process_statue_info* Arena::CreateMaybeMessage< ::test_2::process_statue_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::process_statue_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::send_process_listening_status_info* Arena::CreateMaybeMessage< ::test_2::send_process_listening_status_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::send_process_listening_status_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::client_request_field_link_info* Arena::CreateMaybeMessage< ::test_2::client_request_field_link_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::client_request_field_link_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::link_field_info* Arena::CreateMaybeMessage< ::test_2::link_field_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::link_field_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::send_field_all_values_info* Arena::CreateMaybeMessage< ::test_2::send_field_all_values_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::send_field_all_values_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
